if(method == 1)# linear
stop("need at least two non-NA values to interpolate")
if(n == 0) stop("zero non-NA points")
}
n
is.na(n)
x = x.values.1
y = y.values.1
x <- regularize.values(x, y, ties) # -> (x,y) numeric of same length
x
df
df[1,1] = NA
pred <- ROCR::prediction(df, labels, label.ordering = c("NR", "R"))
perf <- ROCR::performance(pred,"tpr","fpr")
df
perf <- ROCR::performance(pred,"tpr","fpr")
View(pred)
pred@tp
pred@labels[[1]]
pred@predictions[[1]]
df
pred <- ROCR::prediction(df, labels, label.ordering = c("NR", "R"))
View(pred)
pred@predictions[[1]]
View(df)
perf <- ROCR::performance(pred,"tpr","fpr")
.Call?
Call?
.Call()
.Call?
.Call??
?.Call
## 1. Test input consistency once
x <- as.double(x); y <- as.double(y)
.Call(C_ApproxTest, x, y, method, f)
df <- predictions_immune_response[[algorithm]][[view]][[task]]
pred <- ROCR::prediction(df, labels, label.ordering = c("NR", "R"))
perf <- ROCR::performance(pred,"tpr","fpr")
View(df)
View(df)
df <- predictions_immune_response[[algorithm]][[view]][[task]]
pred <- ROCR::prediction(df, labels, label.ordering = c("NR", "R"))
perf <- ROCR::performance(pred,"tpr","fpr")
rm(x.values)
rm(x.values.1)
rm(x.values.2)
rm(y.values)
rm(p.obj.1)
rm(p.obj.2)
rm(perf.obj.1.obj.2)
rm(perf.obj.1)
rm(perf.obj.2)
df <- predictions_immune_response[[algorithm]][[view]][[task]]
pred <- ROCR::prediction(df, labels, label.ordering = c("NR", "R"))
perf <- ROCR::performance(pred,"tpr","fpr")
devtools::install("/home/olapuent/Downloads/ISPRESSO")
library(ISPRESSO)
gold_standards_to_compute <- c("CYT", "impres", "IPS", "CTLA4", "PD1", "PDL1")
# Example: Riaz -------------------------
data(allData_riaz)
# ****************
# Computation of pathways scores
Pathway_activities <- compute_pathways_scores(RNA.raw_counts = Riaz_data$raw_counts_RNAseq)
# ****************
# Computation of TF activity
TF_activities <- compute_TF_activity(RNA.raw_counts = Riaz_data$raw_counts_RNAseq)
# ****************
# Predict immune response
predictions_immune_response <- predict_immune_response(pathways = Pathway_activities$scores,
tfs = TF_activities$scores,
immunecells = Riaz_data$cell_fractions)
predictions_immune_response = predictions_immune_response
real_patient_response = Riaz_data$patient_response
RNA.raw_counts = Riaz_data$raw_counts_RNAseq
RNA.tpm = Riaz_data$tpm_RNAseq
output_file = "/home/olapuent/Downloads/ISPRESSO/figures/"
# ****************
# initialize variables
AUC.median <- AUC.sd <- Model <- Task <- View <- NULL
view_combinations <- names(predictions_immune_response[[1]])
tasks <- names(predictions_immune_response[[1]][[1]])
colors_views <- list("#ff789e","#4cde9d","#9962ec","#5d5319","#00589c","#4dd9df") ; names(colors_views) <- view_combinations
colors_tasks <- list("#2349cc","#8a9500","#a70078","#00d8ee","#faaeea") ; names(colors_tasks) <- tasks
labels <- matrix(real_patient_response, nrow = length(real_patient_response), ncol = 100)
AUC_values <- vector("list", length(view_combinations)) ; names(AUC_values) <- view_combinations
default_list_gold_standards <- c("CYT", "impres", "IPS", "PD1")
list_gold_standards = default_list_gold_standards
gold.standards <- computation_gold_standards(RNA.raw_counts, RNA.tpm, list_gold_standards)
colors_gold.standards <- as.list(gray.colors(length(list_gold_standards))) ; names(colors_gold.standards) <- paste0(names(gold.standards),"_GS")
gold.standards <- sapply(names(gold.standards), function(X){
tmp <- matrix(as.numeric(gold.standards[[X]]), nrow = length(gold.standards[[X]]), ncol = 100,  dimnames = list(colnames(gold.standards[[X]])))
return(list(tmp))
})
names(predictions_immune_response)
view_combinations
tasks
algorithm = "BEMKL"
task = "consensus"
view = "pathways"
df <- predictions_immune_response[[algorithm]][[view]][[task]]
pred <- ROCR::prediction(df, labels, label.ordering = c("NR", "R"))
perf <- ROCR::performance(pred,"tpr","fpr")
df[1,1] <- NA
pred <- ROCR::prediction(df, labels, label.ordering = c("NR", "R"))
perf <- ROCR::performance(pred,"tpr","fpr")
View(perf)
tak = "IPS"
df <- predictions_immune_response[[algorithm]][[view]][[task]]
View(df)
View(df)
load("~/Desktop/PhD_TUE/Github_Elastic_Net/Interpretation_results_paper/output/SKCM/Analysis/elastic_net_analysis_SKCM_train_rand100_withConsensus_quanTIseq_SpatialTIL.RData")
View(Analysis)
?as.integer
as.integer(1)
as.integer(0)
?check
?getwd()
getwd
getwd()
library(devtools)
devtools::install("/home/olapuent/Downloads/ISPRESSO")
#devtools::install("/home/olapuent/Downloads/ISPRESSO")
library(ISPRESSO)
gold_standards_to_compute <- c("CYT", "impres", "IPS", "CTLA4", "PD1", "PDL1")
# Example: Riaz -------------------------
data(allData_riaz)
# ****************
# Computation of pathways scores
Pathway_activities <- compute_pathways_scores(RNA.raw_counts = Riaz_data$raw_counts_RNAseq)
# ****************
# Computation of TF activity
TF_activities <- compute_TF_activity(RNA.raw_counts = Riaz_data$raw_counts_RNAseq)
# ****************
# Predict immune response
predictions_immune_response <- predict_immune_response(pathways = Pathway_activities$scores,
tfs = TF_activities$scores,
immunecells = Riaz_data$cell_fractions)
View(predictions_immune_response)
predictions_immune_response[["BEMKL"]][["pathways_tfs"]][["CYT"]]
load("~/Desktop/PhD_TUE/Github_Elastic_Net/Interpretation_results_paper/Results_from_Francesca/ISPRESSO_FF.RData")
View(predictions_immune_response)
?cv.glmnet
library(glmnet)
?cv.glmnet
if (require("TH.data")) {
data("bodyfat", package = "TH.data")}
if (require("TH.data")) {
data("bodyfat", package = "TH.data")
}else{
data.bodyfat <- matrix(rnorm(720), nrow = 72, ncol = 10)}
}
set.seed(1234)
if (require("glmnet")) {
(stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],fitfun = cv.glmnet,
args.fitfun = list(alpha = X,
standardize = FALSE,
intercept = TRUE,
keep = TRUE,),
cutoff = 0.75,PFER = 1))
par(mfrow = c(2, 1))
plot(stab.glmnet, main = "Lasso (glmnet)")
if (exists("stab.lasso"))
plot(stab.lasso, main = "Lasso (lars)")
}
library(stabsel)
install.packages("stabsel")
install.packages("c060")
library(060)
library(c060)
(stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],fitfun = cv.glmnet,
args.fitfun = list(alpha = X,
standardize = FALSE,
intercept = TRUE,
keep = TRUE,),
cutoff = 0.75,PFER = 1))
(stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],fitfun = cv.glmnet,
args.fitfun = list(alpha = X,
standardize = FALSE,
intercept = TRUE,
keep = TRUE),
cutoff = 0.75,PFER = 1))
X = 0.5
(stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],fitfun = cv.glmnet,
args.fitfun = list(alpha = X,
standardize = FALSE,
intercept = TRUE,
keep = TRUE),
cutoff = 0.75,PFER = 1))
list(alpha = 0.5,
standardize = FALSE,
intercept = TRUE,
keep = TRUE)
bodyfat[, -2]
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],fitfun = cv.glmnet,
args.fitfun = list(alpha = 0.5,
standardize = FALSE,
intercept = TRUE,
keep = TRUE), cutoff = 0.75,PFER = 1)
y = bodyfat[,2]
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],fitfun = "cv.glmnet",
args.fitfun = list(alpha = 0.5,
standardize = FALSE,
intercept = TRUE,
keep = TRUE), cutoff = 0.75,PFER = 1)
args.fitfun = list(alpha = 0.5,
standardize = FALSE,
intercept = TRUE,
keep = TRUE)
View(args.fitfun)
?cv.glmnet
?fitfun
??fitfun
?stabsel
if (require("glmnet")) {
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], fitfun = cv.glmnet,
args.fitfun = list(alpha = 0.5,
standardize = FALSE,
intercept = TRUE,
keep = TRUE), cutoff = 0.75,PFER = 1)
par(mfrow = c(2, 1))
plot(stab.glmnet, main = "Lasso (glmnet)")
if (exists("stab.lasso"))
plot(stab.lasso, main = "Lasso (lars)")
}
?stabpath
library(stabs)
install.packages("stabs")
library(stabs)
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], fitfun = cv.glmnet,
args.fitfun = list(alpha = 0.5,
standardize = FALSE,
intercept = TRUE,
keep = TRUE), cutoff = 0.75,PFER = 1)
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], fitfun = cv.glmnet,
args.fitfun = list(alpha = 0.5,
standardize = FALSE,
type.measure = "mse",
nfolds = 10,
intercept = TRUE,
keep = TRUE), cutoff = 0.75,PFER = 1)
?stabsel
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], fitfun = glmnet,
args.fitfun = list(alpha = 0.5,
standardize = FALSE,
type.measure = "mse",
nfolds = 10,
intercept = TRUE,
keep = TRUE), cutoff = 0.75,PFER = 1)
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], fitfun = glmnet,
args.fitfun = list(alpha = 0.5,
standardize = FALSE,
type.measure = "mse",
intercept = TRUE,
keep = TRUE), cutoff = 0.75,PFER = 1)
?glmnet
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], fitfun = glmnet,
args.fitfun = list(alpha = 0.5,
standardize = FALSE,
intercept = TRUE), cutoff = 0.75,PFER = 1)
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], fitfun = glmnet,
args.fitfun = list(alpha = 0.5,
standardize = TRUE,
intercept = TRUE), cutoff = 0.75,PFER = 1)
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], fitfun = glmnet,
args.fitfun = list(alpha = 0.5), cutoff = 0.75,PFER = 1)
data.bodyfat <- matrix(rnorm(720), nrow = 72, ncol = 10)}
data("bodyfat", package = "TH.data")
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], fitfun = glmnet,
args.fitfun = list(alpha = 0.5), cutoff = 0.75,PFER = 1)
stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], fitfun = glmnet.lasso,
args.fitfun = list(alpha = 0.5), cutoff = 0.75,PFER = 1)
?glmnet.lasso
View(stab.glmnet)
BiocManager::install("progeny")
library("progeny")
?progeny
load("~/Desktop/PhD_TUE/Github_Elastic_Net/data/Pipeline/Validation_datasets/LIU_data.RData")
View(LIU_data)
write.csv(LIU_data$tpm_RNAseq, file = "LIU_tpm_RNAseq.csv")
getwd()
library(ISPRESSO)
# Example: Riaz -------------------------
data(allData_riaz)
Riaz_data
Riaz_data$cell_fractions
View(Riaz_data)
#devtools::install("/home/olapuent/Downloads/ISPRESSO")
library(ISPRESSO)
gold_standards_to_compute <- c("CTLA4", "PD1", "PDL1")
load("~/Desktop/PhD_TUE/Github_model/desktop/data/Validation/LIU/LIU_data.RData")
# ****************
# Computation of pathways scores
Pathway_activities <- compute_pathways_scores(RNA.raw_counts = LIU_data$raw_counts_RNAseq)
# ****************
# Computation of TF activity
TF_activities <- compute_TF_activity(RNA.raw_counts = LIU_data$raw_counts_RNAseq)
# ****************
# Predict immune response
predictions_immune_response <- predict_immune_response(pathways = Pathway_activities$scores,
tfs = TF_activities$scores,
immunecells = LIU_data$cell_fractions)
# ****************
# Compare predicted immune response with real patient response
compare_response(predictions_immune_response = predictions_immune_response,
real_patient_response = LIU_data$patient_response,
RNA.raw_counts = LIU_data$raw_counts_RNAseq,
RNA.tpm = LIU_data$tpm_RNAseq,
output_file = "/home/olapuent/Downloads/ISPRESSO/figures/",
list_gold_standards = gold_standards_to_compute)
load("~/Desktop/PhD_TUE/Github_model/desktop/data/Validation/Francesca/Hugo/Hugo_sampleinfo.rdata")
View(sampleinfo)
load("~/Desktop/PhD_TUE/Github_model/desktop/data/Validation/All_Labels_test_pre.RData")
View(All.Labels.test)
All.Labels.test[["Hugo"]]
load("~/Desktop/PhD_TUE/Github_model/desktop/data/Validation/All_DataViews_test_pre.RData")
View(All.DataViews.test)
rownames(All.DataViews.test[["Hugo"]][["transcript"]])
a = All.DataViews.test[["Hugo"]][["transcript"]][c("SRR3184298","SRR3184299"),]
View(a)
a$UBE2Q2P2
a[,"IL17D"]
load("~/Desktop/PhD_TUE/Github_model/desktop/data/Validation/Francesca/Riaz/Riaz_sampleinfo.rdata")
View(sampleinfo)
# ****************
# working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# ****************
# functions
panel.cor <- function(x, y, digits=2, font.cor = 1, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- cor.test(x,y)$estimate
p <- cor.test(x,y)$p.value
txt_r <- format(r, digits=digits)
txt_p <- format(p, scientific = TRUE, digits=digits)
txt <- paste("cor=", txt_r, "\np=", txt_p, sep="")
if(txt_r >= 0.7 & txt_p >= 0.05) font.cor <- 2
text(0.5, 0.5, txt, cex = 1, font = font.cor)
}
panel.lm <- function (x, y, col = par("col"), bg = NA, pch = par("pch"), cex = 0.8, col.smooth = "#A1A1A1", ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
# abline(stats::lm(y ~ x),  col = col.smooth, ...)
abline(a=0, b=1,  col = col.smooth, ...)
}
# ****************
# Select cancer type
## no filter
load("TCGA_samples_available_screening_with_quanTIseq_IS.RData")
PanCancer.names <- names(TCGA.samples.pancancer_with_screen_quantiseg_IS)
# ****************
# views
views <- c(pathways = 'gaussian', #1
Protall = 'gaussian', #2
immunecells = 'gaussian', #3
TFs = 'gaussian', #4
transcript = 'gaussian', #5
sTIL = 'gaussian', #6
LRpairs = 'gaussian', #7
CYTOKINEpairs = 'gaussian')  #8)
## TFs ##
view_combinations <- list(views[4])
# Check
comb_remove_IS_CYT_IPS_IMPRES_genes <- do.call(rbind, lapply(PanCancer.names, function(Cancer){
# Load previous data (remove IS,CYT,IPS,IMPRES)
load(paste0("/home/olapuent/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/data/PanCancer/",
Cancer,"/new/DataViews_no_filter_", Cancer,".RData"))
a <- DataViews.no_filter[[names(view_combinations[[1]])]]
tmp_data <- as.matrix(a)
return(tmp_data)
}))
comb_remove_all_genes <- do.call(rbind, lapply(PanCancer.names, function(Cancer){
# Load previous data (remove all)
load(paste0("/home/olapuent/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/data/PanCancer/",
Cancer,"/new_remove_all_genes/DataViews_no_filter_", Cancer,".RData"))
b <- DataViews.no_filter[[names(view_combinations[[1]])]]
tmp_data <- as.matrix(b)
return(tmp_data)
}))
comb_keep_all_genes <- do.call(rbind, lapply(PanCancer.names, function(Cancer){
# Load previous data (keep_all)
load(paste0("/home/olapuent/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/data/PanCancer/",
Cancer, "/new_keep_all_genes/DataViews_no_filter_",Cancer,".RData"))
c <- DataViews.no_filter[[names(view_combinations[[1]])]]
tmp_data <- as.matrix(c)
return(tmp_data)
}))
data <- data.frame(remove_IS_CYT_IPS_IMPRES_genes = as.vector(comb_remove_IS_CYT_IPS_IMPRES_genes),
remove_all_genes = as.vector(comb_remove_all_genes),
keep_all_genes = as.vector(comb_keep_all_genes))
keep_TFs <- colnames(comb_remove_all_genes)
data <- data.frame(remove_IS_CYT_IPS_IMPRES_genes = as.vector(comb_remove_IS_CYT_IPS_IMPRES_genes[,keep_TFs]),
remove_all_genes = as.vector(comb_remove_all_genes[,keep_TFs]),
keep_all_genes = as.vector(comb_keep_all_genes[,keep_TFs]))
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
par(adj = 0)
title(main = "TFs computation", cex.main = 1.5)
paste0("/home/olapuent/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/figures/correlation_",
names(view_combinations[[1]]),"_computation.pdf")
pdf(paste0("/home/olapuent/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/figures/correlation_",
names(view_combinations[[1]]),"_computation.pdf"), width = 12, height = 12)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
par(adj = 0)
title(main = "TFs computation", cex.main = 1.5)
dev.off()
jpeg(paste0("/home/olapuent/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/figures/correlation_",
names(view_combinations[[1]]),"_computation.jpeg"), width = 12, height = 12)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
jpeg(paste0("/home/olapuent/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/figures/correlation_",
names(view_combinations[[1]]),"_computation.jpeg"))
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
par(adj = 0)
title(main = "TFs computation", cex.main = 1.5)
dev.off()
pdf(paste0("./correlation_",names(view_combinations[[1]]),"_computation.pdf"), width = 8, height = 8)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
par(adj = 0)
title(main = "TFs computation", cex.main = 1.5)
dev.off()
pdf(paste0("./correlation_",names(view_combinations[[1]]),"_computation.pdf"), width = 6, height = 6)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
par(adj = 0)
title(main = "TFs computation", cex.main = 1.5)
dev.off()
pdf(paste0("./correlation_",names(view_combinations[[1]]),"_computation.pdf"), width = 6, height = 6)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
par(adj = 0)
title(main = "TFs computation", cex.main = 1)
dev.off()
title(main = "TFs computation", cex.main = 1)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
par(adj = 0)
title(main = "TFs computation", cex.main = 0.5)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
par(adj = 0)
title(main = "TFs computation", cex.main = 0.75)
dev.off()
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
par(adj = 0)
title(main = "TFs computation", cex.main = 0.75)
dev.off()
dev.off()
dev.off()
par(adj = 0)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 0.8)
title(main = "TFs computation", cex.main = 0.75)
par(adj = 0)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 1)
title(main = "TFs computation", cex.main = 0.75)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 1)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 1)
par(adj = 1)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 1)
title(main = "TFs computation", cex.main = 0.75)
par(adj = 0.5)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 1)
title(main = "TFs computation", cex.main = 0.75)
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 1)
## Pathways ##
view_combinations <- list(views[1])
# Check
comb_remove_IS_CYT_IPS_IMPRES_genes <- do.call(rbind, lapply(PanCancer.names, function(Cancer){
# Load previous data (remove IS,CYT,IPS,IMPRES)
load(paste0("/home/olapuent/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/data/PanCancer/",
Cancer,"/new/DataViews_no_filter_", Cancer,".RData"))
a <- DataViews.no_filter[[names(view_combinations[[1]])]]
tmp_data <- as.matrix(a)
return(tmp_data)
}))
comb_remove_all_genes <- do.call(rbind, lapply(PanCancer.names, function(Cancer){
# Load previous data (remove all)
load(paste0("/home/olapuent/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/data/PanCancer/",
Cancer,"/new_remove_all_genes/DataViews_no_filter_", Cancer,".RData"))
b <- DataViews.no_filter[[names(view_combinations[[1]])]]
tmp_data <- as.matrix(b)
return(tmp_data)
}))
comb_keep_all_genes <- do.call(rbind, lapply(PanCancer.names, function(Cancer){
# Load previous data (keep_all)
load(paste0("/home/olapuent/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/data/PanCancer/",
Cancer, "/new_keep_all_genes/DataViews_no_filter_",Cancer,".RData"))
c <- DataViews.no_filter[[names(view_combinations[[1]])]]
tmp_data <- as.matrix(c)
return(tmp_data)
}))
keep_common_features <- colnames(comb_remove_all_genes)
keep_common_features
data <- data.frame(remove_IS_CYT_IPS_IMPRES_genes = as.vector(comb_remove_IS_CYT_IPS_IMPRES_genes[,keep_TFs]),
remove_all_genes = as.vector(comb_remove_all_genes[,keep_TFs]),
keep_all_genes = as.vector(comb_keep_all_genes[,keep_TFs]))
data <- data.frame(remove_IS_CYT_IPS_IMPRES_genes = as.vector(comb_remove_IS_CYT_IPS_IMPRES_genes[,keep_common_features]),
remove_all_genes = as.vector(comb_remove_all_genes[,keep_common_features]),
keep_all_genes = as.vector(comb_keep_all_genes[,keep_common_features]))
pairs( ~ . , data = data, upper.panel = panel.cor,lower.panel = panel.lm,
cex.labels = 1)
