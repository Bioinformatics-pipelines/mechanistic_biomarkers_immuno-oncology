df.label <- gsub("No","NR", df.label)
}
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]][[1]] <- df.label
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab) <- names(colors.tasks)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]]) <- names(alpha.algorithm)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]]) <- names(colors.DataType)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]])
})
names(predictions_immune_response[[Cancer]][[dataset]]) <- names(alpha.analysis_alg)
return(predictions_immune_response[[Cancer]][[dataset]])
})
names(predictions_immune_response[[Cancer]]) <- Datasets.names[filter.cancer]
return(predictions_immune_response[[Cancer]])
})
names(predictions_immune_response) <- PanCancer.names
View(predictions_immune_response)
predictions_immune_response <- all.predictions.test
View(predictions_immune_response)
names(colors.tasks)
names(predictions_immune_response$SKCM$Gide$all$pathways$Elastic_Net$pred)
colors.tasks <- toupper(c("#84be45","#9c5bce","#4c923d","#c24eac","#5dc597","#d34782","#368868","#cf483d","#5ba2d6",
"#d1a43c","#616cc5","#85873e","#c086c7","#c07643","#ba6272"))
names(colors.tasks) <- names(predictions_immune_response$SKCM$Gide$all$pathways$Elastic_Net$pred)
colors.tasks
Datasets.names
PanCancer.names
View(predictions_immune_response)
# Check labels, we need to be consistent --> label.ordering = c("NR", "R") #
predictions_immune_response <- lapply(PanCancer.names, function(Cancer){
# check data type is available for validation data
filter.cancer <- which(names(Datasets.names) == Cancer)
predictions_immune_response[[Cancer]] <- lapply(Datasets.names[filter.cancer], function(dataset){
predictions_immune_response[[Cancer]][[dataset]] <- lapply(names(alpha.analysis_alg), function(anal){
predictions_immune_response[[Cancer]][[dataset]][[anal]] <- lapply(names(colors.DataType), function(view){
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]] <- lapply(names(alpha.algorithm), function(algorithm){
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab <- lapply(names(colors.tasks), function(task){
df.label <- predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]][[1]]
if (dataset %in% c("Kim","Gide","Riaz","Liu", "comb.Gide_Auslander")){
df.label <- gsub(" ","", df.label)
df.label <- gsub("CR|PR|MR|PRCR","R", df.label)
df.label <- gsub("SD|PD|PD ","NR", df.label)
} else if (dataset == "Hugo"){
df.label <- gsub("Complete Response|Partial Response", "R", df.label)
df.label <- gsub("Progressive Disease","NR", df.label)
} else if (dataset == "Zhao"){
df.label <- gsub("Yes|Yes, > 6 months stable","R", df.label)
df.label <- gsub("No","NR", df.label)
} else if (dataset = "comb.Hugo_Liu_Riaz"){
df.label <- gsub(" ","", df.label)
df.label <- gsub("CR|PR|MR|PRCR|Complete Response|Partial Response","R", df.label)
df.label <- gsub("SD|PD|PD|Progressive Disease","NR", df.label)
}
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]][[1]] <- df.label
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab) <- names(colors.tasks)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]]) <- names(alpha.algorithm)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]]) <- names(colors.DataType)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]])
})
names(predictions_immune_response[[Cancer]][[dataset]]) <- names(alpha.analysis_alg)
return(predictions_immune_response[[Cancer]][[dataset]])
})
names(predictions_immune_response[[Cancer]]) <- Datasets.names[filter.cancer]
return(predictions_immune_response[[Cancer]])
})
Datasets.names
filter.cancer
# check data type is available for validation data
filter.cancer <- which(names(Datasets.names) == Cancer)
filter.cancer
Cancer
# Check labels, we need to be consistent --> label.ordering = c("NR", "R") #
predictions_immune_response <- lapply(PanCancer.names, function(Cancer){
# check data type is available for validation data
filter.cancer <- which(names(Datasets.names) == Cancer)
predictions_immune_response[[Cancer]] <- lapply(Datasets.names[filter.cancer], function(dataset){
predictions_immune_response[[Cancer]][[dataset]] <- lapply(names(alpha.analysis_alg), function(anal){
predictions_immune_response[[Cancer]][[dataset]][[anal]] <- lapply(names(colors.DataType), function(view){
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]] <- lapply(names(alpha.algorithm), function(algorithm){
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab <- lapply(names(colors.tasks), function(task){
df.label <- predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]][[1]]
if (dataset %in% c("Kim","Gide","Riaz","Liu", "comb.Gide_Auslander")){
df.label <- gsub(" ","", df.label)
df.label <- gsub("CR|PR|MR|PRCR","R", df.label)
df.label <- gsub("SD|PD|PD ","NR", df.label)
} else if (dataset == "Hugo"){
df.label <- gsub("Complete Response|Partial Response", "R", df.label)
df.label <- gsub("Progressive Disease","NR", df.label)
} else if (dataset == "Zhao"){
df.label <- gsub("Yes|Yes, > 6 months stable","R", df.label)
df.label <- gsub("No","NR", df.label)
} else if (dataset = "comb.Hugo_Liu_Riaz"){
df.label <- gsub(" ","", df.label)
df.label <- gsub("CR|PR|MR|PRCR|Complete Response|Partial Response","R", df.label)
df.label <- gsub("SD|PD|PD|Progressive Disease","NR", df.label)
}
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]][[1]] <- df.label
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab) <- names(colors.tasks)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]]) <- names(alpha.algorithm)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]]) <- names(colors.DataType)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]])
})
names(predictions_immune_response[[Cancer]][[dataset]]) <- names(alpha.analysis_alg)
return(predictions_immune_response[[Cancer]][[dataset]])
})
names(predictions_immune_response[[Cancer]]) <- Datasets.names[filter.cancer]
return(predictions_immune_response[[Cancer]])
})
# Check labels, we need to be consistent --> label.ordering = c("NR", "R") #
predictions_immune_response <- lapply(PanCancer.names, function(Cancer){
# check data type is available for validation data
filter.cancer <- which(names(Datasets.names) == Cancer)
predictions_immune_response[[Cancer]] <- lapply(Datasets.names[filter.cancer], function(dataset){
predictions_immune_response[[Cancer]][[dataset]] <- lapply(names(alpha.analysis_alg), function(anal){
predictions_immune_response[[Cancer]][[dataset]][[anal]] <- lapply(names(colors.DataType), function(view){
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]] <- lapply(names(alpha.algorithm), function(algorithm){
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab <- lapply(names(colors.tasks), function(task){
df.label <- predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]][[1]]
if (dataset %in% c("Kim","Gide","Riaz","Liu", "comb.Gide_Auslander")){
df.label <- gsub(" ","", df.label)
df.label <- gsub("CR|PR|MR|PRCR","R", df.label)
df.label <- gsub("SD|PD|PD ","NR", df.label)
} else if (dataset == "Hugo"){
df.label <- gsub("Complete Response|Partial Response", "R", df.label)
df.label <- gsub("Progressive Disease","NR", df.label)
} else if (dataset == "Zhao"){
df.label <- gsub("Yes|Yes, > 6 months stable","R", df.label)
df.label <- gsub("No","NR", df.label)
} else if (dataset == "comb.Hugo_Liu_Riaz"){
df.label <- gsub(" ","", df.label)
df.label <- gsub("CR|PR|MR|PRCR|Complete Response|Partial Response","R", df.label)
df.label <- gsub("SD|PD|PD|Progressive Disease","NR", df.label)
}
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]][[1]] <- df.label
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab) <- names(colors.tasks)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]]) <- names(alpha.algorithm)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]]) <- names(colors.DataType)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]])
})
names(predictions_immune_response[[Cancer]][[dataset]]) <- names(alpha.analysis_alg)
return(predictions_immune_response[[Cancer]][[dataset]])
})
names(predictions_immune_response[[Cancer]]) <- Datasets.names[filter.cancer]
return(predictions_immune_response[[Cancer]])
})
names(predictions_immune_response) <- PanCancer.names
View(predictions_immune_response)
ROC_info <- list()
# filter.analysis.alg <- list(all = c("L21", "Elastic_Net"), all_top = "L21")
filter.analysis.alg <- list(all = c("Elastic_Net"))
filter.analysis.task <- list(all = names(colors.tasks))#, all_top = names(colors.tasks)[-c(3,4,8,12,13)])
# Collect predictions #
ROC_info <-  lapply(PanCancer.names, function(Cancer){
cat("Cancer:",Cancer, "\n")
# check data type is available for validation data
filter.cancer <- which(names(Datasets.names) == Cancer)
ROC_info <-  lapply(Datasets.names[filter.cancer], function(dataset){
cat("Dataset:",dataset, "\n")
ROC_info <-  lapply(names(alpha.analysis_alg), function(anal){
cat("Analysis:",anal, "\n")
ROC_info <-  lapply(names(colors.DataType), function(view){
cat("View:",view, "\n")
ROC_info <-  lapply(filter.analysis.alg[[anal]], function(algorithm){
cat("Algorithm:",algorithm, "\n")
ROC_info <- lapply(c(filter.analysis.task[[anal]],"common_all","common_top"), function(task){
cat("Task:",task, "\n")
df <- predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]
if (task == "common_all"){
df$pred[["common_all"]][[1]] <- matrix(0,nrow(df$pred$CYT[[1]]), ncol = 100)
df$lab[["common_all"]][[1]] <- df$lab$CYT[[1]]
for (j in 1:100) {
for(i in 1:nrow(df$pred$CYT[[1]])){
df$pred[["common_all"]][[1]][i,j] <- median(c(df$pred$CYT[[1]][i,j], df$pred$IS[[1]][i,j], df$pred$IPS[[1]][i,j],
df$pred$IMPRES[[1]][i,j], df$pred$RohIS[[1]][i,j], df$pred$chemokine[[1]][i,j],
df$pred$IS_Davoli[[1]][i,j], df$pred$Proliferation[[1]][i,j], df$pred$IFny[[1]][i,j],
df$pred$ExpandedImmune[[1]][i,j], df$pred$T_cell_inflamed[[1]][i,j], df$pred$TIDE[[1]][i,j],
df$pred$MSI[[1]][i,j]))
}
}
rownames(df$pred[["common_all"]][[1]]) <- rownames(df$lab$CYT[[1]])
}else if (task == "common_top"){
df$pred[["common_top"]][[1]] <- matrix(0,nrow(df$pred$CYT[[1]]), ncol = 100)
df$lab[["common_top"]][[1]] <- df$lab$CYT[[1]]
for (j in 1:100) {
for(i in 1:nrow(df$pred$CYT[[1]])){
df$pred[["common_top"]][[1]][i,j]<- median(c(df$pred$CYT[[1]][i,j], df$pred$IS[[1]][i,j],
df$pred$RohIS[[1]][i,j], df$pred$chemokine[[1]][i,j],
df$pred$IS_Davoli[[1]][i,j], df$pred$IFny[[1]][i,j],
df$pred$ExpandedImmune[[1]][i,j], df$pred$T_cell_inflamed[[1]][i,j]))
}
}
rownames(df$pred[["common_top"]][[1]]) <- rownames(df$lab$CYT[[1]])
}
pred <- ROCR::prediction(df$pred[[task]][[1]],df$lab[[task]][[1]], label.ordering = c("NR", "R"))
perf <- ROCR::performance(pred,"tpr","fpr")
AUC <- unlist(ROCR::performance(pred, "auc")@y.values)
data_ROC <- list(perf)
Barplot <- list(AUC)
return(list(Curve = data_ROC, Barplot = Barplot))
})
names(ROC_info) <- c(filter.analysis.task[[anal]],"common_all","common_top")
return(ROC_info)
})
names(ROC_info) <- filter.analysis.alg[[anal]]
return(ROC_info)
})
names(ROC_info) <- names(colors.DataType)
return(ROC_info)
})
names(ROC_info) <- names(alpha.analysis_alg)[1]
return(ROC_info)
})
names(ROC_info) <- Datasets.names[filter.cancer]
return(ROC_info)
})
View(predictions_immune_response)
predictions_immune_response[["SKCM"]][["comb.Hugo_Liu_Riaz"]][["all"]][["transcript"]][["Elastic_Net"]][["lab"]][["CYT"]][["transcript"]]
a <- predictions_immune_response[["SKCM"]][["comb.Hugo_Liu_Riaz"]][["all"]][["transcript"]][["Elastic_Net"]][["lab"]][["CYT"]][["transcript"]]
View(a)
predictions_immune_response[["SKCM"]][["Hugo"]][["all"]][["transcript"]][["Elastic_Net"]][["lab"]][["CYT"]][["transcript"]]
predictions_immune_response <- all.predictions.test
predictions_immune_response[["SKCM"]][["comb.Gide_Auslander"]][["all"]][["pathways_immunecells"]][["Elastic_Net"]][["lab"]][["CYT"]][["pathways_immunecells"]]
# Check labels, we need to be consistent --> label.ordering = c("NR", "R") #
predictions_immune_response <- lapply(PanCancer.names, function(Cancer){
# check data type is available for validation data
filter.cancer <- which(names(Datasets.names) == Cancer)
predictions_immune_response[[Cancer]] <- lapply(Datasets.names[filter.cancer], function(dataset){
predictions_immune_response[[Cancer]][[dataset]] <- lapply(names(alpha.analysis_alg), function(anal){
predictions_immune_response[[Cancer]][[dataset]][[anal]] <- lapply(names(colors.DataType), function(view){
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]] <- lapply(names(alpha.algorithm), function(algorithm){
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab <- lapply(names(colors.tasks), function(task){
df.label <- predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]][[1]]
if (dataset %in% c("Kim","Gide","Riaz","Liu", "comb.Gide_Auslander")){
df.label <- gsub(" ","", df.label)
df.label <- gsub("CR|PR|MR|PRCR","R", df.label)
df.label <- gsub("SD|PD|PD ","NR", df.label)
} else if (dataset == "Hugo"){
df.label <- gsub("Complete Response|Partial Response", "R", df.label)
df.label <- gsub("Progressive Disease","NR", df.label)
} else if (dataset == "Zhao"){
df.label <- gsub("Yes|Yes, > 6 months stable","R", df.label)
df.label <- gsub("No","NR", df.label)
} else if (dataset == "comb.Hugo_Liu_Riaz"){
df.label <- gsub(" ","", df.label)
df.label <- gsub("CR|PR|MR|PRCR|CompleteResponse|PartialResponse","R", df.label)
df.label <- gsub("SD|PD|PD|ProgressiveDisease","NR", df.label)
}
predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]][[1]] <- df.label
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab[[task]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]$lab) <- names(colors.tasks)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]]) <- names(alpha.algorithm)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]])
})
names(predictions_immune_response[[Cancer]][[dataset]][[anal]]) <- names(colors.DataType)
return(predictions_immune_response[[Cancer]][[dataset]][[anal]])
})
names(predictions_immune_response[[Cancer]][[dataset]]) <- names(alpha.analysis_alg)
return(predictions_immune_response[[Cancer]][[dataset]])
})
names(predictions_immune_response[[Cancer]]) <- Datasets.names[filter.cancer]
return(predictions_immune_response[[Cancer]])
})
names(predictions_immune_response) <- PanCancer.names
View(predictions_immune_response)
predictions_immune_response[["SKCM"]][["comb.Hugo_Liu_Riaz"]][["all"]][["pathways_immunecells"]][["Elastic_Net"]][["lab"]][["CYT"]][["pathways_immunecells"]]
predictions_immune_response[["SKCM"]][["comb.Gide_Auslander"]][["all"]][["pathways_immunecells"]][["Elastic_Net"]][["lab"]][["CYT"]][["pathways_immunecells"]]
ROC_info <- list()
# filter.analysis.alg <- list(all = c("L21", "Elastic_Net"), all_top = "L21")
filter.analysis.alg <- list(all = c("Elastic_Net"))
filter.analysis.task <- list(all = names(colors.tasks))#, all_top = names(colors.tasks)[-c(3,4,8,12,13)])
# Collect predictions #
ROC_info <-  lapply(PanCancer.names, function(Cancer){
cat("Cancer:",Cancer, "\n")
# check data type is available for validation data
filter.cancer <- which(names(Datasets.names) == Cancer)
ROC_info <-  lapply(Datasets.names[filter.cancer], function(dataset){
cat("Dataset:",dataset, "\n")
ROC_info <-  lapply(names(alpha.analysis_alg), function(anal){
cat("Analysis:",anal, "\n")
ROC_info <-  lapply(names(colors.DataType), function(view){
cat("View:",view, "\n")
ROC_info <-  lapply(filter.analysis.alg[[anal]], function(algorithm){
cat("Algorithm:",algorithm, "\n")
ROC_info <- lapply(c(filter.analysis.task[[anal]],"common_all","common_top"), function(task){
cat("Task:",task, "\n")
df <- predictions_immune_response[[Cancer]][[dataset]][[anal]][[view]][[algorithm]]
if (task == "common_all"){
df$pred[["common_all"]][[1]] <- matrix(0,nrow(df$pred$CYT[[1]]), ncol = 100)
df$lab[["common_all"]][[1]] <- df$lab$CYT[[1]]
for (j in 1:100) {
for(i in 1:nrow(df$pred$CYT[[1]])){
df$pred[["common_all"]][[1]][i,j] <- median(c(df$pred$CYT[[1]][i,j], df$pred$IS[[1]][i,j], df$pred$IPS[[1]][i,j],
df$pred$IMPRES[[1]][i,j], df$pred$RohIS[[1]][i,j], df$pred$chemokine[[1]][i,j],
df$pred$IS_Davoli[[1]][i,j], df$pred$Proliferation[[1]][i,j], df$pred$IFny[[1]][i,j],
df$pred$ExpandedImmune[[1]][i,j], df$pred$T_cell_inflamed[[1]][i,j], df$pred$TIDE[[1]][i,j],
df$pred$MSI[[1]][i,j]))
}
}
rownames(df$pred[["common_all"]][[1]]) <- rownames(df$lab$CYT[[1]])
}else if (task == "common_top"){
df$pred[["common_top"]][[1]] <- matrix(0,nrow(df$pred$CYT[[1]]), ncol = 100)
df$lab[["common_top"]][[1]] <- df$lab$CYT[[1]]
for (j in 1:100) {
for(i in 1:nrow(df$pred$CYT[[1]])){
df$pred[["common_top"]][[1]][i,j]<- median(c(df$pred$CYT[[1]][i,j], df$pred$IS[[1]][i,j],
df$pred$RohIS[[1]][i,j], df$pred$chemokine[[1]][i,j],
df$pred$IS_Davoli[[1]][i,j], df$pred$IFny[[1]][i,j],
df$pred$ExpandedImmune[[1]][i,j], df$pred$T_cell_inflamed[[1]][i,j]))
}
}
rownames(df$pred[["common_top"]][[1]]) <- rownames(df$lab$CYT[[1]])
}
pred <- ROCR::prediction(df$pred[[task]][[1]],df$lab[[task]][[1]], label.ordering = c("NR", "R"))
perf <- ROCR::performance(pred,"tpr","fpr")
AUC <- unlist(ROCR::performance(pred, "auc")@y.values)
data_ROC <- list(perf)
Barplot <- list(AUC)
return(list(Curve = data_ROC, Barplot = Barplot))
})
names(ROC_info) <- c(filter.analysis.task[[anal]],"common_all","common_top")
return(ROC_info)
})
names(ROC_info) <- filter.analysis.alg[[anal]]
return(ROC_info)
})
names(ROC_info) <- names(colors.DataType)
return(ROC_info)
})
names(ROC_info) <- names(alpha.analysis_alg)[1]
return(ROC_info)
})
names(ROC_info) <- Datasets.names[filter.cancer]
return(ROC_info)
})
names(ROC_info) <- PanCancer.names
AUC.mean.sd <- do.call(rbind, lapply(PanCancer.names, function(Cancer){
cat("Cancer:",Cancer, "\n")
# check data type is available for validation data
filter.cancer <- which(names(Datasets.names) == Cancer)
AUC.mean.sd <- do.call(rbind, lapply(Datasets.names[filter.cancer], function(dataset){
cat("Dataset:",dataset, "\n")
AUC.mean.sd <- do.call(rbind, lapply(names(alpha.analysis_alg), function(anal){
cat("Analysis:",anal, "\n")
AUC.mean.sd <- do.call(rbind, lapply(names(colors.DataType), function(view){
cat("View:",view, "\n")
AUC.mean.sd <- do.call(rbind, lapply(filter.analysis.alg[[anal]], function(algorithm){
cat("Algorithm:",algorithm, "\n")
AUC.mean.sd <- do.call(rbind, lapply(c(filter.analysis.task[[anal]],"common_all","common_top"), function(task){
AUC.data <- data.frame(Cancer = rep(Cancer, times = 100),
Dataset = rep(dataset, times = 100),
Analysis = rep(anal, times = 100),
View = rep(view, times = 100),
Model = rep(algorithm, times = 100),
Task = rep(task, times = 100),
iteration =  seq(1,100),
AUC = as.numeric(unlist(ROC_info[[Cancer]][[dataset]][[anal]][[view]][[algorithm]][[task]]$Barplot)))
AUC.mean.sd <- do.call(data.frame, aggregate(AUC ~ Cancer + Dataset + Analysis + View + Model + Task,
data = AUC.data, FUN = function(x) c(median = median(x), sd = sd(x))))
}))
return(AUC.mean.sd)
}))
return(AUC.mean.sd)
}))
return(AUC.mean.sd)
}))
return(AUC.mean.sd)
}))
return(AUC.mean.sd)
}))
AUC.mean.sd$Analysis_alg <- factor(paste0(AUC.mean.sd$Model,"_", AUC.mean.sd$Analysis))
alpha.analysis_alg <- c(1)
names(alpha.analysis_alg) <- levels(AUC.mean.sd$Analysis_alg)
alpha.analysis_alg
View(AUC.mean.sd)
# Subset #
CancerType <- "SKCM"
# Subset #
CancerType <- "SKCM"
tmp.barplot <- subset(AUC.mean.sd, Cancer == CancerType & Task %in% c("consensus_all", "consensus_top", "common_all", "common_top"))
View(tmp.barplot)
# Barplot #
ggplot2::ggplot(tmp.barplot, aes(x=View, y=round(AUC.median,2), fill=Task,
colour = Task)) + # alpha = Analysis_alg)) +
ggplot2::geom_bar(stat="identity", position = position_dodge()) +
ggplot2::scale_fill_manual(name = "Task",
labels = c("common_all","common_top"),
values = as.vector(colors.tasks[1:2])) +
ggplot2::scale_color_manual(name = "Task",
labels = c("common_all","common_top"),
values =  as.vector(colors.tasks[1:2])) +
# ggplot2::scale_alpha_manual(name = "Algorithms",
#                    labels = names(alpha.analysis_alg),
#                    values = alpha.analysis_alg)  +
ggplot2::theme_minimal() +
ggplot2::facet_grid(Dataset ~ .) +
ggplot2::ylim(0, 1) +
ggplot2::ylab("AUC") +
ggplot2::geom_errorbar(aes(ymin = AUC.median - AUC.sd, ymax = AUC.median + AUC.sd),
width=.5, color="gray", position = position_dodge(0.9)) +
ggplot2::geom_text(aes(label= round(AUC.median,2)),stat = "identity", color="black", size = 3, angle = 90,
position = position_dodge(0.9)) +
scale_x_discrete(labels = c("immunecells"= "ImmuneCells",
"pathways"="Pathways",
"pathways_immunecells"="Pathways \n + \n Immunecells")) +
theme(axis.text.x = element_text(size=10,face="bold", angle = 0, vjust = 0.5, hjust=0.5), axis.title.x = element_blank(),
axis.text.y = element_text(size=10,face="bold"), axis.ticks.x = element_line(size = 1), axis.ticks.y = element_line(size = 1),
axis.title.y = element_text(size=10,face="bold",vjust = 0.9), strip.background = element_blank(), panel.spacing.y =  unit(1, "lines"),
legend.position = "right", legend.direction = "vertical",
legend.text=element_text(size=9), legend.title = element_text(size = 10, face="bold", vjust = 0.5),
panel.border = element_blank(), panel.background = element_blank(), axis.line = element_line(size=0.5, colour = "black")) +
# ggtitle(paste0("Mechanistic signatures performance across ",CancerType, " datasets (",AnalysisType,")"))
ggtitle(paste0("Mechanistic signatures performance across ",CancerType, " datasets"))
# Barplot #
ggplot2::ggplot(tmp.barplot, aes(x=View, y=round(AUC.median,2), fill=Task,
colour = Task)) + # alpha = Analysis_alg)) +
ggplot2::geom_bar(stat="identity", position = position_dodge()) +
ggplot2::scale_fill_manual(name = "Task",
labels =c("consensus_all", "consensus_top", "common_all", "common_top"),
values = as.vector(colors.tasks[1:4])) +
ggplot2::scale_color_manual(name = "Task",
labels =c("consensus_all", "consensus_top", "common_all", "common_top"),
values =  as.vector(colors.tasks[1:4])) +
# ggplot2::scale_alpha_manual(name = "Algorithms",
#                    labels = names(alpha.analysis_alg),
#                    values = alpha.analysis_alg)  +
ggplot2::theme_minimal() +
ggplot2::facet_grid(Dataset ~ .) +
ggplot2::ylim(0, 1) +
ggplot2::ylab("AUC") +
ggplot2::geom_errorbar(aes(ymin = AUC.median - AUC.sd, ymax = AUC.median + AUC.sd),
width=.5, color="gray", position = position_dodge(0.9)) +
ggplot2::geom_text(aes(label= round(AUC.median,2)),stat = "identity", color="black", size = 3, angle = 90,
position = position_dodge(0.9)) +
scale_x_discrete(labels = c("immunecells"= "ImmuneCells",
"pathways"="Pathways",
"pathways_immunecells"="Pathways \n + \n Immunecells")) +
theme(axis.text.x = element_text(size=10,face="bold", angle = 0, vjust = 0.5, hjust=0.5), axis.title.x = element_blank(),
axis.text.y = element_text(size=10,face="bold"), axis.ticks.x = element_line(size = 1), axis.ticks.y = element_line(size = 1),
axis.title.y = element_text(size=10,face="bold",vjust = 0.9), strip.background = element_blank(), panel.spacing.y =  unit(1, "lines"),
legend.position = "right", legend.direction = "vertical",
legend.text=element_text(size=9), legend.title = element_text(size = 10, face="bold", vjust = 0.5),
panel.border = element_blank(), panel.background = element_blank(), axis.line = element_line(size=0.5, colour = "black")) +
# ggtitle(paste0("Mechanistic signatures performance across ",CancerType, " datasets (",AnalysisType,")"))
ggtitle(paste0("Mechanistic signatures performance across ",CancerType, " datasets"))
# Barplot #
ggplot2::ggplot(tmp.barplot, aes(x=View, y=round(AUC.median,2), fill=Task,
colour = Task)) + # alpha = Analysis_alg)) +
ggplot2::geom_bar(stat="identity", position = position_dodge()) +
ggplot2::scale_fill_manual(name = "Task",
labels =c("consensus_all", "consensus_top", "common_all", "common_top"),
values = as.vector(colors.tasks[1:4])) +
ggplot2::scale_color_manual(name = "Task",
labels =c("consensus_all", "consensus_top", "common_all", "common_top"),
values =  as.vector(colors.tasks[1:4])) +
# ggplot2::scale_alpha_manual(name = "Algorithms",
#                    labels = names(alpha.analysis_alg),
#                    values = alpha.analysis_alg)  +
ggplot2::theme_minimal() +
ggplot2::facet_grid(Dataset ~ .) +
ggplot2::ylim(0, 1) +
ggplot2::ylab("AUC") +
ggplot2::geom_errorbar(aes(ymin = AUC.median - AUC.sd, ymax = AUC.median + AUC.sd),
width=.5, color="gray", position = position_dodge(0.9)) +
ggplot2::geom_text(aes(label= round(AUC.median,2)),stat = "identity", color="black", size = 3, angle = 90,
position = position_dodge(0.9)) +
scale_x_discrete(labels = c("immunecells"= "ImmuneCells",
"LRpairs"= "L-R pairs",
"pathways"="Pathways",
"pathways_immunecells"="Pathways \n + \n Immunecells",
"TFs" = "TFs",
"transcript" = "Transcriptomics")) +
theme(axis.text.x = element_text(size=10,face="bold", angle = 0, vjust = 0.5, hjust=0.5), axis.title.x = element_blank(),
axis.text.y = element_text(size=10,face="bold"), axis.ticks.x = element_line(size = 1), axis.ticks.y = element_line(size = 1),
axis.title.y = element_text(size=10,face="bold",vjust = 0.9), strip.background = element_blank(), panel.spacing.y =  unit(1, "lines"),
legend.position = "right", legend.direction = "vertical",
legend.text=element_text(size=9), legend.title = element_text(size = 10, face="bold", vjust = 0.5),
panel.border = element_blank(), panel.background = element_blank(), axis.line = element_line(size=0.5, colour = "black")) +
# ggtitle(paste0("Mechanistic signatures performance across ",CancerType, " datasets (",AnalysisType,")"))
ggtitle(paste0("Mechanistic signatures performance across ",CancerType, " datasets"))
ggsave(paste0("../figures/Federica_presentation_colab/",
"Barplot_with_aucs_on_SKCM_datasets.pdf"), width = 12, height = 12)
View(all_cv_res)
all_cv_res[["Elastic_Net"]][[1]][["model"]][["Coef"]][["CYT"]][["min.mse"]]
?glmnet
?glmnet
?cv.glmnet
