View(stat.test)
View(summary)
# Convert data.frame variables into factors
summary$algorithm <- factor(summary$algorithm, levels = c("Multi_Task_EN", "BEMKL"))
summary$dataType
summary$dataType <- factor(summary$dataType)
summary$cancerType <- factor(summary$cancerType)
summary$measure <- factor(summary$measure, levels = c("MSE", "PeCorr", "SpCorr", "CI"))
summary$task <- factor(summary$task, levels = unique(summary$task))
# DataType
colors.DataType <- toupper(c("#90d784","#cb38ba",
"#00c65b","#d40051",
"#afab00","#3d9eff",
"#855400","#ff9db1",
"#b39765","#ffaf71"))
color_views <- c("#6CD8CB","darkorange2")
names(color_views) <- c("Pathways.cor", "Protall")
# Algorithm
colors.algorithm <- toupper(c("#ff7433","#853760"))
names(colors.algorithm) <- levels(summary$algorithm)
alpha.algorithm <- c(0.95,0.5)
names(alpha.algorithm) <- levels(summary$algorithm)
# Elastic Net
summary_RMTLR <- subset(summary, measure == "SpCorr" & algorithm == "Multi_Task_EN")
summary_RMTLR$task <- factor(summary_RMTLR$task)
# BEMKL
summary_BEMKL <- subset(summary, measure == "SpCorr" & algorithm == "BEMKL")
summary_BEMKL$task <- factor(summary_BEMKL$task)
# Both algorithms
summary_both <- rbind(summary_RMTLR, summary_BEMKL)
summary_both$task <- factor(summary_both$task)
summary_both$iter <- rep(seq(1, 100), each = 10)
summary_both_average_tasks <- aggregate(perf ~ measure + algorithm + dataType + cancerType + iter, FUN = "mean", data = summary_both)
View(summary_both_average_tasks)
1800*2*2
anyNA(summary)
View(summary)
is.na(summary_both$perf)
View(summary_both)
summary_both[is.na(summary_both$perf),]
a <- summary_both[is.na(summary_both$perf),]
View(a)
load("~/ownCloud2/SystemsImmunoOncology/Mechanistic_signatures_project/data/PanCancer_draft_v1/PRAD/DataViews_filter_prot_PRAD.RData")
load("~/ownCloud2/SystemsImmunoOncology/Mechanistic_signatures_project/data/PanCancer_draft_v1/PAAD/DataViews_filter_prot_PAAD.RData")
View(DataViews.filter_prot)
DataViews.filter_prot[["Protall"]]
df.signif <- do.call(rbind, lapply(setdiff(as.character(unique(df$cancerType), "PAAD")), function(X){
print(X)
df.signif <- do.call(rbind, lapply(as.character(unique(df$algorithm)), function(Y){
print(Y)
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
#stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
stat.test$dataType <- factor(stat.test$dataType, levels = c("Pathways.cor", "Protall"))
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$p
if(p.value <= 0.0001){
label <- "****"
}else if(p.value <= 0.001){
label <- "***"
}else if(p.value <= 0.01){
label <- "**"
}else if(p.value <= 0.05){
label <- "*"
}else if(p.value > 0.05){
label <- "ns"
}
return(data.frame(cancerType = X, algorithm = Y,  p.val = p.value, label = label))
}))
return(df.signif)
}))
df.signif <- do.call(rbind, lapply(setdiff(as.character(unique(df$cancerType), "PAAD")), function(X){
print(X)
df.signif <- do.call(rbind, lapply(as.character(unique(df$algorithm)), function(Y){
print(Y)
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
#stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
stat.test$dataType <- factor(stat.test$dataType, levels = c("Pathways.cor", "Protall"))
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$p
if(p.value <= 0.0001){
label <- "****"
}else if(p.value <= 0.001){
label <- "***"
}else if(p.value <= 0.01){
label <- "**"
}else if(p.value <= 0.05){
label <- "*"
}else if(p.value > 0.05){
label <- "ns"
}
return(data.frame(cancerType = X, algorithm = Y,  p.val = p.value, label = label))
}))
return(df.signif)
}))
setdiff(as.character(unique(df$cancerType), "PAAD"))
df.signif <- do.call(rbind, lapply(setdiff(as.character(unique(df$cancerType)), "PAAD"), function(X){
print(X)
df.signif <- do.call(rbind, lapply(as.character(unique(df$algorithm)), function(Y){
print(Y)
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
#stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
stat.test$dataType <- factor(stat.test$dataType, levels = c("Pathways.cor", "Protall"))
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$p
if(p.value <= 0.0001){
label <- "****"
}else if(p.value <= 0.001){
label <- "***"
}else if(p.value <= 0.01){
label <- "**"
}else if(p.value <= 0.05){
label <- "*"
}else if(p.value > 0.05){
label <- "ns"
}
return(data.frame(cancerType = X, algorithm = Y,  p.val = p.value, label = label))
}))
return(df.signif)
}))
df.signif <- do.call(rbind, lapply(setdiff(as.character(unique(df$cancerType)), "PAAD","PRAD"), function(X){
print(X)
df.signif <- do.call(rbind, lapply(as.character(unique(df$algorithm)), function(Y){
print(Y)
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
#stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
stat.test$dataType <- factor(stat.test$dataType, levels = c("Pathways.cor", "Protall"))
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$p
if(p.value <= 0.0001){
label <- "****"
}else if(p.value <= 0.001){
label <- "***"
}else if(p.value <= 0.01){
label <- "**"
}else if(p.value <= 0.05){
label <- "*"
}else if(p.value > 0.05){
label <- "ns"
}
return(data.frame(cancerType = X, algorithm = Y,  p.val = p.value, label = label))
}))
return(df.signif)
}))
df.signif <- do.call(rbind, lapply(setdiff(as.character(unique(df$cancerType)), c("PAAD","PRAD")), function(X){
print(X)
df.signif <- do.call(rbind, lapply(as.character(unique(df$algorithm)), function(Y){
print(Y)
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
#stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
stat.test$dataType <- factor(stat.test$dataType, levels = c("Pathways.cor", "Protall"))
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$p
if(p.value <= 0.0001){
label <- "****"
}else if(p.value <= 0.001){
label <- "***"
}else if(p.value <= 0.01){
label <- "**"
}else if(p.value <= 0.05){
label <- "*"
}else if(p.value > 0.05){
label <- "ns"
}
return(data.frame(cancerType = X, algorithm = Y,  p.val = p.value, label = label))
}))
return(df.signif)
}))
df.signif
summary <- rbind(tmp_immunecells, tmp_immunecells_stil)
# Convert data.frame variables into factors
summary$algorithm <- factor(summary$algorithm, levels = c("Multi_Task_EN", "BEMKL"))
summary$dataType <- factor(summary$dataType)
summary$cancerType <- factor(summary$cancerType)
summary$measure <- factor(summary$measure, levels = c("MSE", "PeCorr", "SpCorr", "CI"))
summary$task <- factor(summary$task, levels = unique(summary$task))
# DataType
colors.DataType <- toupper(c("#90d784","#cb38ba",
"#00c65b","#d40051",
"#afab00","#3d9eff",
"#855400","#ff9db1",
"#b39765","#ffaf71"))
color_views <- c("#ff983d","CC6AF2")
names(color_views) <- c("ImmuneCells", "ImmuneCells_sTIL")
color_views <- c("#6CD8CB","darkorange2")
names(color_views) <- c("Pathways.cor", "Protall")
# Algorithm
colors.algorithm <- toupper(c("#ff7433","#853760"))
names(colors.algorithm) <- levels(summary$algorithm)
alpha.algorithm <- c(0.95,0.5)
names(alpha.algorithm) <- levels(summary$algorithm)
# Elastic Net
summary_RMTLR <- subset(summary, measure == "SpCorr" & algorithm == "Multi_Task_EN")
summary_RMTLR$task <- factor(summary_RMTLR$task)
# BEMKL
summary_BEMKL <- subset(summary, measure == "SpCorr" & algorithm == "BEMKL")
summary_BEMKL$task <- factor(summary_BEMKL$task)
# Both algorithms
summary_both <- rbind(summary_RMTLR, summary_BEMKL)
summary_both$task <- factor(summary_both$task)
summary_both$iter <- rep(seq(1, 100), each = 10)
a <- summary_both[is.na(summary_both$perf),]
summary_both_average_tasks <- aggregate(perf ~ measure + algorithm + dataType + cancerType + iter, FUN = "mean", data = summary_both)
# Assess if it's significant the addition of spatial information on immune cells quantification:
df <- summary_both_average_tasks[, c("perf", "dataType", "algorithm", "cancerType")]
df.signif <- do.call(rbind, lapply(setdiff(as.character(unique(df$cancerType)), c("PAAD","PRAD")), function(X){
print(X)
df.signif <- do.call(rbind, lapply(as.character(unique(df$algorithm)), function(Y){
print(Y)
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
#stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
stat.test$dataType <- factor(stat.test$dataType, levels = c("Pathways.cor", "Protall"))
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$p
if(p.value <= 0.0001){
label <- "****"
}else if(p.value <= 0.001){
label <- "***"
}else if(p.value <= 0.01){
label <- "**"
}else if(p.value <= 0.05){
label <- "*"
}else if(p.value > 0.05){
label <- "ns"
}
return(data.frame(cancerType = X, algorithm = Y,  p.val = p.value, label = label))
}))
return(df.signif)
}))
View(df)
df.signif <- do.call(rbind, lapply(as.character(unique(df$cancerType), function(X){
df.signif <- do.call(rbind, lapply(as.character(unique(df$cancerType)), function(X){
print(X)
df.signif <- do.call(rbind, lapply(as.character(unique(df$algorithm)), function(Y){
print(Y)
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
#stat.test$dataType <- factor(stat.test$dataType, levels = c("Pathways.cor", "Protall"))
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$p
if(p.value <= 0.0001){
label <- "****"
}else if(p.value <= 0.001){
label <- "***"
}else if(p.value <= 0.01){
label <- "**"
}else if(p.value <= 0.05){
label <- "*"
}else if(p.value > 0.05){
label <- "ns"
}
return(data.frame(cancerType = X, algorithm = Y,  p.val = p.value, label = label))
}))
return(df.signif)
}))
df.signif <- do.call(rbind, lapply(as.character(unique(df$cancerType)), function(X){
print(X)
df.signif <- do.call(rbind, lapply(as.character(unique(df$algorithm)), function(Y){
print(Y)
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
#stat.test$dataType <- factor(stat.test$dataType, levels = c("Pathways.cor", "Protall"))
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$p
if(p.value <= 0.0001){
label <- "****"
}else if(p.value <= 0.001){
label <- "***"
}else if(p.value <= 0.01){
label <- "**"
}else if(p.value <= 0.05){
label <- "*"
}else if(p.value > 0.05){
label <- "ns"
}
return(data.frame(cancerType = X, algorithm = Y,  p.val = p.value, label = label))
}))
return(df.signif)
}))
df.signif_EN <- subset(df.signif, algorithm == "Multi_Task_EN")
df.signif_BE <- subset(df.signif, algorithm == "BEMKL")
df.signif_EN
X = "BLCA"
Y = "Multi_Task_EN"
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
stat.test
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$p
p.value
wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "less", paired = TRUE)$p
p.value
X = "CRC"
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$p
p.value
wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)$
stat.test
wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater", paired = TRUE)
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater")$p
p.value
df.signif <- do.call(rbind, lapply(as.character(unique(df$cancerType)), function(X){
print(X)
df.signif <- do.call(rbind, lapply(as.character(unique(df$algorithm)), function(Y){
print(Y)
stat.test <- df %>% filter(cancerType == X) %>% filter(algorithm == Y)
stat.test$dataType <- factor(stat.test$dataType, levels = c("ImmuneCells_sTIL", "ImmuneCells"))
#stat.test$dataType <- factor(stat.test$dataType, levels = c("Pathways.cor", "Protall"))
p.value <- wilcox_test(perf ~ dataType, data = stat.test, alternative = "greater")$p
if(p.value <= 0.0001){
label <- "****"
}else if(p.value <= 0.001){
label <- "***"
}else if(p.value <= 0.01){
label <- "**"
}else if(p.value <= 0.05){
label <- "*"
}else if(p.value > 0.05){
label <- "ns"
}
return(data.frame(cancerType = X, algorithm = Y,  p.val = p.value, label = label))
}))
return(df.signif)
}))
df.signif
df.signif
df.signif_EN <- subset(df.signif, algorithm == "Multi_Task_EN")
df.signif_BE <- subset(df.signif, algorithm == "BEMKL")
df.signif_EN
df.signif_BE
View(summary_both_average_tasks_RMTLR)
summary_both_average_tasks_pancancer <- aggregate(perf ~ measure + algorithm + dataType, FUN = "mean", data = summary_both_average_tasks)
View(summary_both_average_tasks_pancancer)
View(df.signif)
load("/Users/Oscar/Desktop/group_cor_normalized_tasks/comb.Gide_Auslander_on_na_only_PD1/comb.Gide_Auslander_on_pd1_tasks.RData")
View(comb.Gide_Auslander_on_pd1_tasks_data)
load("/Users/Oscar/Desktop/group_cor_normalized_tasks/comb.Gide_Auslander_pre_na_only_PD1/comb.Gide_Auslander_pre_pd1_tasks.RData")
load("/Users/Oscar/Desktop/group_cor_normalized_tasks/comb.Gide_Auslander_pre_na_only_PD1/comb.Gide_Auslander_tasks_pre_pd1_patients")
load("/Users/Oscar/Desktop/group_cor_normalized_tasks/comb.Gide_Auslander_pre_na_only_PD1/comb.Gide_Auslander_tasks_pre_pd1_patients.RData")
# Script to apply multi-task learning
#
#
#
#
# working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# packages
library(devtools)
library(matrixStats)
# model prior parameters
load("../data/parameters_4_all.RData")
# select view
view_name <- "Pathways"
View_input <- vector("character", length = length(strsplit(view_name,"_", fixed = TRUE)[[1]]))
View_input
# select view
view_name <- list(Pathways = "gaussian")
view_name
# select algorithm
algorithm <- "RMTLR"
library(easier) # install easier package from github
# source files
source("./tcga_training/randomized_crossvalidation.R")
# model prior parameters
load("../data/parameters_4_all.RData")
# algorithms
input_algorithm <- c("Multi_Task_EN", "BEMKL")
# cancer type
cancer_type <- "SKCM"
# Kim:
load("~/ownCloud2/SystemsImmunoOncology/Mechanistic_signatures_project/data/PanCancer_draft_v1/Validation/Kim_data_pre.rda")
# Gide:
load("~/ownCloud2/SystemsImmunoOncology/Mechanistic_signatures_project/data/PanCancer_draft_v1/Validation/Gide_data_pre.rda")
load("~/ownCloud2/SystemsImmunoOncology/Mechanistic_signatures_project/data/PanCancer_draft_v1/Validation/Gide_data_on.rda")
# Auslander:
load("~/ownCloud2/SystemsImmunoOncology/Mechanistic_signatures_project/data/PanCancer_draft_v1/Validation/Auslander_data_pre.rda")
load("~/ownCloud2/SystemsImmunoOncology/Mechanistic_signatures_project/data/PanCancer_draft_v1/Validation/Auslander_data_on.rda")
dataset <- "Auslander"
#dataset <- "Gide"
cancertype <- "SKCM"
data <- Auslander_data_pre
df.label <- data$patient_response$label
# Computation of pathway activity
Pathway_activities <- compute_pathways_scores(RNA.counts = data$counts, remove.genes.ICB_proxies = TRUE)
tasks <- c("CYT", "Roh_IS", "chemokines", "Davoli_IS", "IFNy", "Ayers_expIS", "Tcell_inflamed", "RIR", "TLS") # Ock_IS was derived from publication
tmp_file_path <- c("")
tasks_values <- compute_gold_standards(RNA.tpm=data$tpm, list_gold_standards=tasks, cancertype=cancer_type, output_file_path=tmp_file_path)
# returns a list, convert to matrix
# Into matrix
all_tasks_values <- do.call(cbind, lapply(tasks, function(X){
all_tasks_values <- t(tasks_values[[X]])
return(all_tasks_values)
}))
View(all_tasks_values)
# Assess correlation between chemokines and the other correlated tasks
tasks_cormatrix <- cor(all_tasks_values)
cor_sign <- sign(tasks_cormatrix[,"chemokines"])
cor_sign <- cor_sign[names(cor_sign) != "chemokines"]
if (all(cor_sign == -1)){
all_tasks_values[,"chemokines"] <- -all_tasks_values[,"chemokines"]
}
tasks_values <- as.data.frame(all_tasks_values)
View(tasks_values)
View(tasks_values)
load("~/ownCloud2/SystemsImmunoOncology/Mechanistic_signatures_project/data/PanCancer_draft_v1/BLCA/ImmuneResponse_no_filter_BLCA.RData")
# returns a list, convert to matrix
# Into matrix
immune_response <- do.call(cbind, lapply(tasks, function(X){
immune_response <- t(tasks_values[[X]])
return(immune_response)
}))
tasks_values <- compute_gold_standards(RNA.tpm=tpm, list_gold_standards=tasks, cancertype=cancer_type, output_file_path=tmp_file_path)
tasks_values <- compute_gold_standards(RNA.tpm=data$tpm, list_gold_standards=tasks, cancertype=cancer_type, output_file_path=tmp_file_path)
# returns a list, convert to matrix
# Into matrix
immune_response <- do.call(cbind, lapply(tasks, function(X){
immune_response <- t(tasks_values[[X]])
return(immune_response)
}))
# Assess correlation between chemokines and the other correlated tasks
tasks_cormat <- cor(immune_response)
cor_sign <- sign(tasks_cormat[,"chemokines"])
cor_sign <- cor_sign[names(cor_sign) != "chemokines"]
if (all(cor_sign == -1)){
immune_response[,"chemokines"] <- -immune_response[,"chemokines"]
}
# select view
view_name <- list(Pathways = "gaussian")
# select algorithm
algorithm <- "RMTLR"
DataViews <- list(Pathways = Pathway_activities)
View(DataViews)
drug_source = immune_response
views_source = DataViews
view_combination = view_name
algorithm = algorithm
standardize_any = T
standardize_response = T
k_fold=5
random=100
parameters$Lasso <- NULL
parameters$Elastic_Net <- NULL
parameters$`CV_linear_reg_L1&L2` <- NULL
parameters$L21 <- NULL
parameters$Logistic_EN <- NULL
parameters$RMTLR <- parameters$Multi_Task_EN
parameters$Multi_Task_EN <- NULL
model_prior_param <- parameters
View(model_prior_param)
load("~/ownCloud2/SystemsImmunoOncology/Mechanistic_signatures_project/data/parameters_4_all.RData")
View(parameters)
# model prior parameters
load("../data/parameters_4_all.RData")
View(parameters)
View(model_prior_param)
save(model_prior_param, file = "../data/model_prior_parameters")
save(model_prior_param, file = "../data/model_prior_parameters.RData")
parameters = parameters[[algorithm]]
parameters = model_prior_param[[algorithm]]
parameters
# ****************
# scripts
source("./tcga_training/RMTLR/run_rmtlr.R")
source("./tcga_training/BEMKL/run_bemkl.R")
# ****************
# General variables:
names_view <- names(view_combination) # Need data type
N <- nrow(drug_source) # number of observations
Ndrug <- ncol(drug_source) # number of tasks (output variables)
P <- length(view_combination) # number of views
# Output variables:
output <- list()
# prepare for k-fold CV
rand_obs_ix <- sample(N) # prepare index of randomized observatios
folds <- cut(seq(1,N),breaks=k_fold,labels=FALSE) #divide in k folds
folds_ix <- lapply(1:k_fold, function(i){
rand_obs_ix[which(folds==i,arr.ind=TRUE)]
})
#if random is set to a number, a randomised cross-validation, selecting each time
#20% of the samples is performed and repeated the specified amount of times
if (!is.null(random)){
k_fold = random
}
# ****************
# scripts
source("./tcga_training/RMTLR/run_rmtlr.R")
source("./tcga_training/BEMKL/run_bemkl.R")
# ****************
# scripts
source("./tcga_training/scaling_function.R")
source("./tcga_training/civalue.R")
source("./tcga_training/RMTLR/rmtlr_test.R")
source("./tcga_training/RMTLR/rmtlr_train.R")
# ****************
# General variables:
names_view <- names(view_combination) # Need data type
P <- length(view_combination) # number of views
Ndrug <- ncol(drug_source) # number of tasks (output variables)
# Output variables:
performances <- list()
model <- list()
training_set <- list()
mas.mea.learning.X <- mas.std.learning.X <- list()
mas.mea.learning.Y <- mas.std.learning.Y <- list()
# ****************
# Initialize variables
names_view <- names(view_combination) # Need data type
# ****************
# Initialize variables
names_view <- names(view_combination) # Need data type
MSE <- SpCorr <- PeCorr <- CI <- MR <- coef_values <- x.train <- hyperparameter_values <- vector("list", length = Ndrug)
names(MSE) <- names(SpCorr) <- names(PeCorr) <- names(CI) <- names(MR) <- names(coef_values) <- names(x.train) <- names(hyperparameter_values) <- names(drug_source)
source("./tcga_training/RMTLR/rmtlr_test.R")
# scripts
source("./tcga_training/scaling_function.R")
source("./tcga_training/civalue.R")
source("./tcga_training/BEMKL/bemkl_supervised_multioutput_regression_variational_train.R")
source("./tcga_training/BEMKL/bemkl_supervised_multioutput_regression_variational_test.R")
