diabetes_lda$scaling
?solve
unitcircle = exp(1i * seq(0, 2*pi, length.out = 90)) %>%
{cbind(Re(.), Im(.))}
ellipse = unitcircle %*% solve(diabetes_lda$scaling)
# All three ellipses, one for each group center.
ellipses = lapply(seq_len(nrow(centers)), function(i) {
(ellipse +
matrix(centers[i, ], byrow = TRUE,
ncol = ncol(centers), nrow = nrow(ellipse))) %>%
cbind(group = i)
}) %>% do.call(rbind, .) %>% data.frame
ellipses$group %<>% factor
centers = diabetes_lda$means
unitcircle = exp(1i * seq(0, 2*pi, length.out = 90)) %>%
{cbind(Re(.), Im(.))}
ellipse = unitcircle %*% solve(diabetes_lda$scaling)
# All three ellipses, one for each group center.
ellipses = lapply(seq_len(nrow(centers)), function(i) {
(ellipse +
matrix(centers[i, ], byrow = TRUE,
ncol = ncol(centers), nrow = nrow(ellipse))) %>%
cbind(group = i)
}) %>% do.call(rbind, .) %>% data.frame
ellipses$group %<>% factor
# As Figure \@ref(fig:chap16-r-scatterdiabetes-1), with the classification regions from the LDA model shown. The three ellipses represent the class centers and the covariance matrix of the LDA model; note that there is only one covariance matrix, which is the same for all three classes. Therefore also the sizes and orientations of the ellipses are the same for the three classes, only their centers differ. They represent contours of equal class membership probability.Figure 12.6: As Figure 12.5, with the classification regions from the LDA model shown. The three ellipses represent the class centers and the covariance matrix of the LDA model; note that there is only one covariance matrix, which is the same for all three classes. Therefore also the sizes and orientations of the ellipses are the same for the three classes, only their centers differ. They represent contours of equal class membership probability.
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE) +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
geom_path(aes(colour = group), data = ellipses) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
library(dplyr)
# As Figure \@ref(fig:chap16-r-scatterdiabetes-1), with the classification regions from the LDA model shown. The three ellipses represent the class centers and the covariance matrix of the LDA model; note that there is only one covariance matrix, which is the same for all three classes. Therefore also the sizes and orientations of the ellipses are the same for the three classes, only their centers differ. They represent contours of equal class membership probability.Figure 12.6: As Figure 12.5, with the classification regions from the LDA model shown. The three ellipses represent the class centers and the covariance matrix of the LDA model; note that there is only one covariance matrix, which is the same for all three classes. Therefore also the sizes and orientations of the ellipses are the same for the three classes, only their centers differ. They represent contours of equal class membership probability.
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE) +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
geom_path(aes(colour = group), data = ellipses) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
make1Dgrid = function(x) {
rg = grDevices::extendrange(x)
seq(from = rg[1], to = rg[2], length.out = 100)
}
diabetes_grid = with(diabetes,
expand.grid(insulin = make1Dgrid(insulin),
glutest = make1Dgrid(glutest)))
diabetes_grid$ghat =
predict(diabetes_lda, newdata = diabetes_grid)$class
centers = diabetes_lda$means
unitcircle = exp(1i * seq(0, 2*pi, length.out = 90)) %>%
{cbind(Re(.), Im(.))}
ellipse = unitcircle %*% solve(diabetes_lda$scaling)
# All three ellipses, one for each group center.
ellipses = lapply(seq_len(nrow(centers)), function(i) {
(ellipse +
matrix(centers[i, ], byrow = TRUE,
ncol = ncol(centers), nrow = nrow(ellipse))) %>%
cbind(group = i)
}) %>% do.call(rbind, .) %>% data.frame
ellipses$group %<>% factor
# As Figure \@ref(fig:chap16-r-scatterdiabetes-1), with the classification regions from the LDA model shown. The three ellipses represent the class centers and the covariance matrix of the LDA model; note that there is only one covariance matrix, which is the same for all three classes. Therefore also the sizes and orientations of the ellipses are the same for the three classes, only their centers differ. They represent contours of equal class membership probability.Figure 12.6: As Figure 12.5, with the classification regions from the LDA model shown. The three ellipses represent the class centers and the covariance matrix of the LDA model; note that there is only one covariance matrix, which is the same for all three classes. Therefore also the sizes and orientations of the ellipses are the same for the three classes, only their centers differ. They represent contours of equal class membership probability.
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE) +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
geom_path(aes(colour = group), data = ellipses) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
View(diabetes_grid)
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE) # +
View(diabetes_grid)
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) #+
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8)
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
geom_path(aes(colour = group), data = ellipses) #+
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
geom_path(aes(colour = group), data = ellipses) #+
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
geom_path(aes(colour = group), data = ellipses) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8)
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
geom_path(aes(colour = group), data = ellipses)
View(ellipses)
?geom_path
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_path(aes(colour = group), data = ellipses)
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
sapply(ellipses, class)
?ggpairs
library("GGally")
library(ggpairs)
install.packages("ggpairs")
BiocManager::install("ggpairs")
?Rprof
?tabulate
tabulate(seq(0,10,1))
seq(0,10,1)
?microbenchmark
install.packages("microbenchmark")
?microbenchmark
library(microbenchmark)
?microbenchmark
?open
options( max.print=300 )
library( airway )
data( airway )
airway
colData(airway)
colnames(dds) <- c( "D1u", "D1t", "D2u", "D2t", "D3u", "D3t", "D4u", "D4t" )
options( max.print=300 )
options( max.print=300 )
library( airway )
data( airway )
airway
colData(airway)
head( assay(airway) )
a <- AnnotationDbi::intraIDMapper( rownames(airway), species="HOMSA",
srcIDType="ENSEMBL", destIDType = "SYMBOL" )
# Do not simply do this:
# rownames(airway) <- a
rownames(airway)[ match( names(a), rownames(airway) ) ] <- unlist(a)
head( assay( airway ) )
library( DESeq2 )
dds <- DESeqDataSet( airway, ~ cell + dex )
dds <- DESeq( dds )
res <- results(dds)
res[ order(res$padj), ]
library( DESeq2 )
dds <- DESeqDataSet( airway, ~ cell + dex )
dds <- DESeq( dds )
res <- results(dds)
#res[ order(res$padj), ]
order(res$padj)
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) +
scale_y_log10()
library( ggplot2 )
counts( dds, normalized=TRUE )
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
scale_y_log10()
library( ggplot2 )
counts( dds, normalized=TRUE )
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp = counts( dds, normalized=F )
#counts( dds, normalized=TRUE )
plot(tmp[,1],tmp[,2])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp = counts( dds, normalized=F )
#counts( dds, normalized=TRUE )
plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp = counts( dds, normalized=TRUE)
#counts( dds, normalized=TRUE )
plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp = counts( dds, normalized=TRUE)
#counts( dds, normalized=TRUE )
plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp1
tmp2 = counts( dds, normalized=TRUE)
tmp2
#counts( dds, normalized=TRUE )
plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=TRUE)
cbind(tmp1,tmp2)
#counts( dds, normalized=TRUE )
plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=TRUE)
cbind(tmp1[1,],tmp2[1,])
#counts( dds, normalized=TRUE )
#plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=FALSE)
cbind(tmp1[1,],tmp2[1,])
#counts( dds, normalized=TRUE )
#plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=FALSE)
cbind(mean(tmp1[1,],mean[1,])
#counts( dds, normalized=TRUE )
#plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=FALSE)
cbind(mean(tmp1[1,]),mean([1,]))
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=FALSE)
cbind(mean(tmp1[1,]),mean(tmp2[1,]))
#counts( dds, normalized=TRUE )
#plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=TRUE)
cbind(mean(tmp1[1,]),mean(tmp2[1,]))
#counts( dds, normalized=TRUE )
#plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
?counts
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
colData(dds)
#
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) +
scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) +
scale_y_log10()
plotMA( dds, ylim = c( -5, 5 ) )
?plotMA
dds
plot( counts(dds)[,1], counts(dds)[,2], asp=1 )
?plot
plot( counts(dds)[,1], counts(dds)[,2], asp=1 )
plot( counts(dds)[,1] + 1, counts(dds)[,2] + 1, log="xy" ) #, pch="." )
avg_N61311 <- ( counts(dds)[,1] + counts(dds)[,2] )/2
ratio_N61311 <- counts(dds)[,2] / counts(dds)[,1]
plot( avg_N61311, ratio_N61311 )
avg_N61311 <- ( counts(dds)[,1] + counts(dds)[,2] )/2
ratio_N61311 <- ( counts(dds)[,2] + 1 ) / ( counts(dds)[,1] + 1 )
plot( avg_N61311, ratio_N61311, log="xy", pch="." )
ratio_N052611 <- ( counts(dds)[,4] + 1 ) / ( counts(dds)[,3] + 1 )
plot( ratio_N61311, ratio_N052611, log="xy", pch="." )
avg_N052611 <- ( counts(dds)[,3] + counts(dds)[,4] )/2
ratio_N052611 <- counts(dds)[,4] / counts(dds)[,3]
plot( avg_N052611, ratio_N052611, log="xy", pch=".", ylim=c(.1, 10))
abline( h=1, col=adjustcolor("green",.4), lwd=3 )
colSums( counts(dds) )/ 1e6
plot( avg_N052611, ratio_N052611, log="xy", pch=".", ylim=c(.1, 10) )
abline( h = 1, col=adjustcolor("green",.4), lwd=3 )
plot( avg_N052611, ratio_N052611, log="xy", pch=".", ylim=c(.1, 10) )
abline( h = 15.16342 / 25.34865, col=adjustcolor("green",.4), lwd=3 )
hist( log2( ratio_N052611 ), breaks=50 )
abline( v = log2( 15.16342 / 25.34865 ), col=adjustcolor("green",.4), lwd=3 )
median_ratio_N052611 <- median( ratio_N052611, na.rm=TRUE )
abline( v = log2( median_ratio_N052611 ), col=adjustcolor("orange",.4), lwd=3 )
plot( avg_N052611, ratio_N052611 / median_ratio_N052611, log="xy", pch=".", ylim=c(.1, 10) )
abline( h = 1, col=adjustcolor("orange",.4), lwd=3 )
sapply( 1:8, function(i)
sapply( 1:8, function(j)
median( counts(dds)[,j] / counts(dds)[,i], na.rm=TRUE ) ) )
vref_counts <- apply( counts(dds), 1, function(x) prod(x) ^ (1/length(x)) )
head( vref_counts, 20 )
source("http://bioconductor.org/biocLite.R")
biocLite(c("biomaRt",
"circlize",
"ComplexHeatmap",
"corrplot",
"DESeq2",
"dplyr",
"DT",
"edgeR",
"ggplot2",
"limma",
"lsmeans",
"reshape2",
"spatstat",
"survival",
"plyr"))
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
source("http://bioconductor.org/biocLite.R")
BiocManager::install("biocLite")
biocLite(c("biomaRt",
"circlize",
"ComplexHeatmap",
"corrplot",
"DESeq2",
"dplyr",
"DT",
"edgeR",
"ggplot2",
"limma",
"lsmeans",
"reshape2",
"spatstat",
"survival",
"plyr"))
BiocManager::install("biocLite")
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
BiocManager::install("biocLite")
BiocManager::install("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
BiocManager::install("IMvigor210CoreBiologies_1.0.0.tar.gz")
source("http://bioconducor.org/biocLite.R")
getwd()
source("http://bioconducor.org/biocLite.R")
source("https://bioconducor.org/biocLite.R")
options(useHTTPS=FALSE, BioC_mirror="http://bioconductor.org")
source("https://bioconducor.org/biocLite.R")
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("biomaRt",
"circlize",
"ComplexHeatmap",
"corrplot",
"DESeq2",
"dplyr",
"DT",
"edgeR",
"ggplot2",
"limma",
"lsmeans",
"reshape2",
"spatstat",
"survival",
"plyr"))
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
BiocManager::install("IMvigor210CoreBiologies")
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/parameters_4_all.RData")
View(parameters)
Cancer = "UCEC"
file <- dir(paste0("../data/raw_data_tcga/RNAseq/20160128_version/stddata__2016_01_28/", Cancer,"/20160128/",
"gdac.broadinstitute.org_", Cancer,".Merge_rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes__data.Level_3.2016012800.0.0"),
recursive = TRUE, pattern = "data.txt", full.names = TRUE)
# Extract the raw counts from the text files for each gene
data.transcripts <- read.csv(file, sep="\t",header=T,  row.names=1, stringsAsFactors=F, check.names=FALSE)
# ****************
# working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
file <- dir(paste0("../data/raw_data_tcga/RNAseq/20160128_version/stddata__2016_01_28/", Cancer,"/20160128/",
"gdac.broadinstitute.org_", Cancer,".Merge_rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes__data.Level_3.2016012800.0.0"),
recursive = TRUE, pattern = "data.txt", full.names = TRUE)
# Extract the raw counts from the text files for each gene
data.transcripts <- read.csv(file, sep="\t",header=T,  row.names=1, stringsAsFactors=F, check.names=FALSE)
colnames(data.transcripts) <- substr(colnames(data.transcripts), 1, 15)
# TPM/scaled_estimate values (transcriptomics data)
get_estimates <- which(data.transcripts[1,] == "scaled_estimate")
estimates.transcripts <- data.frame(data.transcripts[-1,get_estimates])
colnames(estimates.transcripts) <- gsub(".","-", colnames(estimates.transcripts), fixed = TRUE)
genes <- rownames(estimates.transcripts)
estimates.transcripts <- sapply(estimates.transcripts, as.numeric) # numeric
# Obtaining TPM (transcriptomics data)
TPM.transcripts <- estimates.transcripts * 1e6
rownames(TPM.transcripts) <- genes
head(TPM.transcripts)
log2mas1.TPM.transcripts = TPM.transcripts
# Rows with non-valid HGNC symbols were removed.
HGNC_symbol <- sapply(strsplit(rownames(log2mas1.TPM.transcripts),"\\|"),function(X) return(X[1]))
log2mas1.TPM.transcripts <-  log2mas1.TPM.transcripts[-which(HGNC_symbol == "?"),]
HGNC_symbol <-HGNC_symbol[-which(HGNC_symbol == "?")]
HGNC_id <- sapply(strsplit(rownames(log2mas1.TPM.transcripts),"\\|"),function(X) return(X[2]))
# Rows corresponding to the same HGNC symbol were averaged.
if(anyDuplicated(HGNC_symbol) != 0){
idx <- which(duplicated(HGNC_symbol) == TRUE)
dup_genes <- HGNC_symbol[idx]
for (ii in dup_genes){
log2mas1.TPM.transcripts[which(HGNC_symbol %in% ii)[1],] <- colMeans(log2mas1.TPM.transcripts[which(HGNC_symbol %in% ii),])
log2mas1.TPM.transcripts <- log2mas1.TPM.transcripts[-which(HGNC_symbol %in% ii)[2],]
HGNC_symbol <- HGNC_symbol[-which(HGNC_symbol %in% ii)[2]]
}
}
# Remove ImmuneResponse genes
rownames(log2mas1.TPM.transcripts) <- HGNC_symbol
head(log2mas1.TPM.transcripts)
