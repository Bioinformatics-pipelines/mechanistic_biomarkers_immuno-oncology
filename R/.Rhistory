ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
geom_path(aes(colour = group), data = ellipses) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8)
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
geom_path(aes(colour = group), data = ellipses)
View(ellipses)
?geom_path
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_path(aes(colour = group), data = ellipses)
ggdb + geom_raster(aes(fill = ghat),
data = diabetes_grid, alpha = 0.25, interpolate = TRUE)  +
geom_point(data = as_tibble(centers), pch = "+", size = 8) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
sapply(ellipses, class)
?ggpairs
library("GGally")
library(ggpairs)
install.packages("ggpairs")
BiocManager::install("ggpairs")
?Rprof
?tabulate
tabulate(seq(0,10,1))
seq(0,10,1)
?microbenchmark
install.packages("microbenchmark")
?microbenchmark
library(microbenchmark)
?microbenchmark
?open
options( max.print=300 )
library( airway )
data( airway )
airway
colData(airway)
colnames(dds) <- c( "D1u", "D1t", "D2u", "D2t", "D3u", "D3t", "D4u", "D4t" )
options( max.print=300 )
options( max.print=300 )
library( airway )
data( airway )
airway
colData(airway)
head( assay(airway) )
a <- AnnotationDbi::intraIDMapper( rownames(airway), species="HOMSA",
srcIDType="ENSEMBL", destIDType = "SYMBOL" )
# Do not simply do this:
# rownames(airway) <- a
rownames(airway)[ match( names(a), rownames(airway) ) ] <- unlist(a)
head( assay( airway ) )
library( DESeq2 )
dds <- DESeqDataSet( airway, ~ cell + dex )
dds <- DESeq( dds )
res <- results(dds)
res[ order(res$padj), ]
library( DESeq2 )
dds <- DESeqDataSet( airway, ~ cell + dex )
dds <- DESeq( dds )
res <- results(dds)
#res[ order(res$padj), ]
order(res$padj)
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) +
scale_y_log10()
library( ggplot2 )
counts( dds, normalized=TRUE )
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
scale_y_log10()
library( ggplot2 )
counts( dds, normalized=TRUE )
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp = counts( dds, normalized=F )
#counts( dds, normalized=TRUE )
plot(tmp[,1],tmp[,2])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp = counts( dds, normalized=F )
#counts( dds, normalized=TRUE )
plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp = counts( dds, normalized=TRUE)
#counts( dds, normalized=TRUE )
plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp = counts( dds, normalized=TRUE)
#counts( dds, normalized=TRUE )
plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp1
tmp2 = counts( dds, normalized=TRUE)
tmp2
#counts( dds, normalized=TRUE )
plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=TRUE)
cbind(tmp1,tmp2)
#counts( dds, normalized=TRUE )
plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=TRUE)
cbind(tmp1[1,],tmp2[1,])
#counts( dds, normalized=TRUE )
#plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=FALSE)
cbind(tmp1[1,],tmp2[1,])
#counts( dds, normalized=TRUE )
#plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=FALSE)
cbind(mean(tmp1[1,],mean[1,])
#counts( dds, normalized=TRUE )
#plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=FALSE)
cbind(mean(tmp1[1,]),mean([1,]))
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=FALSE)
cbind(mean(tmp1[1,]),mean(tmp2[1,]))
#counts( dds, normalized=TRUE )
#plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
library( ggplot2 )
tmp1 = counts( dds, normalized=TRUE)
tmp2 = counts( dds, normalized=TRUE)
cbind(mean(tmp1[1,]),mean(tmp2[1,]))
#counts( dds, normalized=TRUE )
#plot(tmp[1,],tmp[2,])
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) +
#  scale_y_log10()
?counts
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
colData(dds)
#
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) +
scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) +
scale_y_log10()
plotMA( dds, ylim = c( -5, 5 ) )
?plotMA
dds
plot( counts(dds)[,1], counts(dds)[,2], asp=1 )
?plot
plot( counts(dds)[,1], counts(dds)[,2], asp=1 )
plot( counts(dds)[,1] + 1, counts(dds)[,2] + 1, log="xy" ) #, pch="." )
avg_N61311 <- ( counts(dds)[,1] + counts(dds)[,2] )/2
ratio_N61311 <- counts(dds)[,2] / counts(dds)[,1]
plot( avg_N61311, ratio_N61311 )
avg_N61311 <- ( counts(dds)[,1] + counts(dds)[,2] )/2
ratio_N61311 <- ( counts(dds)[,2] + 1 ) / ( counts(dds)[,1] + 1 )
plot( avg_N61311, ratio_N61311, log="xy", pch="." )
ratio_N052611 <- ( counts(dds)[,4] + 1 ) / ( counts(dds)[,3] + 1 )
plot( ratio_N61311, ratio_N052611, log="xy", pch="." )
avg_N052611 <- ( counts(dds)[,3] + counts(dds)[,4] )/2
ratio_N052611 <- counts(dds)[,4] / counts(dds)[,3]
plot( avg_N052611, ratio_N052611, log="xy", pch=".", ylim=c(.1, 10))
abline( h=1, col=adjustcolor("green",.4), lwd=3 )
colSums( counts(dds) )/ 1e6
plot( avg_N052611, ratio_N052611, log="xy", pch=".", ylim=c(.1, 10) )
abline( h = 1, col=adjustcolor("green",.4), lwd=3 )
plot( avg_N052611, ratio_N052611, log="xy", pch=".", ylim=c(.1, 10) )
abline( h = 15.16342 / 25.34865, col=adjustcolor("green",.4), lwd=3 )
hist( log2( ratio_N052611 ), breaks=50 )
abline( v = log2( 15.16342 / 25.34865 ), col=adjustcolor("green",.4), lwd=3 )
median_ratio_N052611 <- median( ratio_N052611, na.rm=TRUE )
abline( v = log2( median_ratio_N052611 ), col=adjustcolor("orange",.4), lwd=3 )
plot( avg_N052611, ratio_N052611 / median_ratio_N052611, log="xy", pch=".", ylim=c(.1, 10) )
abline( h = 1, col=adjustcolor("orange",.4), lwd=3 )
sapply( 1:8, function(i)
sapply( 1:8, function(j)
median( counts(dds)[,j] / counts(dds)[,i], na.rm=TRUE ) ) )
vref_counts <- apply( counts(dds), 1, function(x) prod(x) ^ (1/length(x)) )
head( vref_counts, 20 )
source("http://bioconductor.org/biocLite.R")
biocLite(c("biomaRt",
"circlize",
"ComplexHeatmap",
"corrplot",
"DESeq2",
"dplyr",
"DT",
"edgeR",
"ggplot2",
"limma",
"lsmeans",
"reshape2",
"spatstat",
"survival",
"plyr"))
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
source("http://bioconductor.org/biocLite.R")
BiocManager::install("biocLite")
biocLite(c("biomaRt",
"circlize",
"ComplexHeatmap",
"corrplot",
"DESeq2",
"dplyr",
"DT",
"edgeR",
"ggplot2",
"limma",
"lsmeans",
"reshape2",
"spatstat",
"survival",
"plyr"))
BiocManager::install("biocLite")
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
BiocManager::install("biocLite")
BiocManager::install("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
BiocManager::install("IMvigor210CoreBiologies_1.0.0.tar.gz")
source("http://bioconducor.org/biocLite.R")
getwd()
source("http://bioconducor.org/biocLite.R")
source("https://bioconducor.org/biocLite.R")
options(useHTTPS=FALSE, BioC_mirror="http://bioconductor.org")
source("https://bioconducor.org/biocLite.R")
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("biomaRt",
"circlize",
"ComplexHeatmap",
"corrplot",
"DESeq2",
"dplyr",
"DT",
"edgeR",
"ggplot2",
"limma",
"lsmeans",
"reshape2",
"spatstat",
"survival",
"plyr"))
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
BiocManager::install("IMvigor210CoreBiologies")
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/parameters_4_all.RData")
View(parameters)
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/GBM/DataViews_no_filter_GBM.RData")
View(DataViews.no_filter)
LR.pairs.computed <- DataViews.no_filter[["LRpairs"]]
# ****************
# data
load("../data/all_genes_ICB_proxies.RData")
load("../data/Ligand_Receptors_Rdata/LR_pairs_network_only_TME.RData") # Load the ligand receptor network (only TME)
load("../data/Ligand_Receptors_Rdata/CYTOKINE_pairs_subnetwork_only_TME.RData") # Load cytokine subnetwork (only TME)
# ****************
# working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# ****************
# data
load("../data/all_genes_ICB_proxies.RData")
load("../data/Ligand_Receptors_Rdata/LR_pairs_network_only_TME.RData") # Load the ligand receptor network (only TME)
load("../data/Ligand_Receptors_Rdata/CYTOKINE_pairs_subnetwork_only_TME.RData") # Load cytokine subnetwork (only TME)
# check what is the percentage of genes we have in our data
genes_kept <- apply(LR.pairs.computed, 2, anyNA)
genes_kept
# Remove missing pairs in both data.frames
apply(LR.pairs.computed, 2, anyNA)
# Remove missing pairs in both data.frames
apply(LR.pairs.computed, 2, anyNA) == TRUE
apply(LR.pairs.computed, 2, anyNA) == TRUE
# Remove missing pairs in both data.frames
colnames(LR.pairs.computed)[as.vector(apply(LR.pairs.computed, 2, anyNA))]
a <- apply(LR.pairs.computed, 2, anyNA)
length(which(a == T))
# Remove missing pairs in both data.frames
colnames(LR.pairs.computed)[as.vector(apply(LR.pairs.computed, 2, anyNA))]
# Remove missing pairs in both data.frames
colnames(LR.pairs.computed)[as.vector(apply(LR.pairs.computed, 2, anyNA))]
# Remove missing pairs in both data.frames
missing.pairs <- colnames(LR.pairs.computed)[as.vector(apply(LR.pairs.computed, 2, anyNA))]
# Remove missing pairs in both data.frames
missing.LRpairs <- colnames(LR.pairs.computed)[as.vector(apply(LR.pairs.computed, 2, anyNA))]
match(missing.LRpairs, colnames(LR.pairs.computed))
LR.pairs.computed <- LR.pairs.computed[,-match(missing.LRpairs, colnames(LR.pairs.computed))]
Cancer = "GBM"
# *****************
# functions
source("scaling_function.R")
# Compute pathway activity
source("compute.pathways.scores.R")
# Compute TFs activity
source("compute.TF.activity.R")
# Compute LR pairs
source("compute.LR.pairs.R")
# General pre-processing tcga gene names
source("preprocess_tcga_genes_names.R")
# Pre-processing tcga gene names to match pathway genes
source("preprocess_gene_names_to_match_pathway_genes.R")
# Pre-processing tcga gene names to match pathway genes
source("preprocess_gene_names_to_match_tf_target_genes.R")
# Pre-processing tcga gene names to match LR pairs genes
source("preprocess_gene_names_to_match_LRpairs_genes.R")
# ****************
# functions from Federica
# Plot correlations including p-value, correlation value and correlation line
panel.cor <- function(x, y, digits=2, font.cor = 1, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- cor.test(x,y)$estimate
p <- cor.test(x,y)$p.value
txt_r <- format(r, digits=digits)
txt_p <- format(p, scientific = TRUE, digits=digits)
txt <- paste("cor=", txt_r, "\np=", txt_p, sep="")
if(txt_r >= 0.7 & txt_p >= 0.05) font.cor <- 2
text(0.5, 0.5, txt, cex = 1, font = font.cor)
}
panel.lm <- function (x, y, col = par("col"), bg = NA, pch = par("pch"), cex = 0.8, col.smooth = "#A1A1A1", ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
# abline(stats::lm(y ~ x),  col = col.smooth, ...)
abline(a=0, b=1,  col = col.smooth, ...)
}
# *****************
# Cancer types
load("../analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS.RData")
load("../analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS_prot.RData")
load("../analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS_Spat.RData")
PanCancer.names <- names(TCGA.samples.pancancer_with_screen_quantiseg_IS)
# Genes to remove according to all ICB proxy's
load("../data/all_genes_ICB_proxies.RData")
message("Cancer type: ", Cancer, "\n")
file <- dir(paste0("../data/raw_data_tcga/RNAseq/20160128_version/stddata__2016_01_28/", Cancer,"/20160128/",
"gdac.broadinstitute.org_", Cancer,".Merge_rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes__data.Level_3.2016012800.0.0"),
recursive = TRUE, pattern = "data.txt", full.names = TRUE)
# Extract the raw counts from the text files for each gene
data.transcripts <- read.csv(file, sep="\t",header=T,  row.names=1, stringsAsFactors=F, check.names=FALSE)
colnames(data.transcripts) <- substr(colnames(data.transcripts), 1, 15)
# TPM/scaled_estimate values (transcriptomics data)
get_estimates <- which(data.transcripts[1,] == "scaled_estimate")
estimates.transcripts <- data.frame(data.transcripts[-1,get_estimates])
colnames(estimates.transcripts) <- gsub(".","-", colnames(estimates.transcripts), fixed = TRUE)
genes <- rownames(estimates.transcripts)
estimates.transcripts <- sapply(estimates.transcripts, as.numeric) # numeric
# Obtaining TPM (transcriptomics data)
TPM.transcripts <- estimates.transcripts * 1e6
rownames(TPM.transcripts) <- genes
# log2mas1.TPM.transcripts <- log2(TPM.transcripts + 1)
#
# # Correct gene names in TCGA data
# log2mas1.TPM.transcripts_process_v1 <- preprocess_tcga_genes_names(log2mas1.TPM.transcripts)
#
# remove.genes <- na.exclude(match(all_genes_to_remove, rownames(log2mas1.TPM.transcripts_process_v1)))
# log2mas1.TPM.transcripts_process_v1 <- log2mas1.TPM.transcripts_process_v1[-remove.genes,]
# message("Removing signatures genes for proxy's of ICB response:  \n")
#
# Sample screening:
keep.samples.no_filter <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS[[Cancer]], 1, 15)
keep.samples.filter_prot <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot[[Cancer]], 1, 15)
keep.samples.filter_spat <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs[[Cancer]], 1, 15)
# Correct gene names in TCGA data
TPM.transcripts_process_v1 <- preprocess_tcga_genes_names(TPM.transcripts)
# Correct gene names in order to match correctly pathway responsive genes
TPM.transcripts_process_v2 <- preprocess_gene_names_to_match_LRpairs_genes(TPM.transcripts_process_v1)
# Sample screening:
tpm.no_filter <- TPM.transcripts_process_v2[, keep.samples.no_filter]
# Computation of LR pairs (input matrix [genes, samples], ouput matrix [sample, LR])
LRpairs.no_filter <- compute.LR.pairs(RNA.tpm = tpm.no_filter, remove.genes.ICB_proxies=TRUE,
compute.cytokines.pairs=TRUE)
View(LRpairs.no_filter)
anyNA(LRpairs.no_filter[["LRpairs"]])
a <- LRpairs.no_filter[["LRpairs"]]
View(DataViews.no_filter)
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/output/PanCancer_draft_v1/STAD/all_cv_res_STAD_train_rand100_with_all_tasks_ImmuneCells.RData")
a <- all_cv_res
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/output/PanCancer_draft_v1/STAD/all_cv_res_STAD_train_rand100_with_cor_tasks_ImmuneCells.RData")
b <- all_cv_res
View(a)
View(b)
View(a)
