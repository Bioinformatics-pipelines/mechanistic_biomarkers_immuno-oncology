geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
colData(dds)
#
# ggplot( cbind(
#      as.data.frame( colData(dds) ),
#      expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
#   geom_point( aes(
#      x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) +
scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) #+
# scale_y_log10()
library( ggplot2 )
ggplot( cbind(
as.data.frame( colData(dds) ),
expr_SPARCL1 = counts( dds, normalized=TRUE )["SPARCL1",] ) ) +
geom_point( aes(
x = cell, y = expr_SPARCL1, col = dex ) ) +
scale_y_log10()
plotMA( dds, ylim = c( -5, 5 ) )
?plotMA
dds
plot( counts(dds)[,1], counts(dds)[,2], asp=1 )
?plot
plot( counts(dds)[,1], counts(dds)[,2], asp=1 )
plot( counts(dds)[,1] + 1, counts(dds)[,2] + 1, log="xy" ) #, pch="." )
avg_N61311 <- ( counts(dds)[,1] + counts(dds)[,2] )/2
ratio_N61311 <- counts(dds)[,2] / counts(dds)[,1]
plot( avg_N61311, ratio_N61311 )
avg_N61311 <- ( counts(dds)[,1] + counts(dds)[,2] )/2
ratio_N61311 <- ( counts(dds)[,2] + 1 ) / ( counts(dds)[,1] + 1 )
plot( avg_N61311, ratio_N61311, log="xy", pch="." )
ratio_N052611 <- ( counts(dds)[,4] + 1 ) / ( counts(dds)[,3] + 1 )
plot( ratio_N61311, ratio_N052611, log="xy", pch="." )
avg_N052611 <- ( counts(dds)[,3] + counts(dds)[,4] )/2
ratio_N052611 <- counts(dds)[,4] / counts(dds)[,3]
plot( avg_N052611, ratio_N052611, log="xy", pch=".", ylim=c(.1, 10))
abline( h=1, col=adjustcolor("green",.4), lwd=3 )
colSums( counts(dds) )/ 1e6
plot( avg_N052611, ratio_N052611, log="xy", pch=".", ylim=c(.1, 10) )
abline( h = 1, col=adjustcolor("green",.4), lwd=3 )
plot( avg_N052611, ratio_N052611, log="xy", pch=".", ylim=c(.1, 10) )
abline( h = 15.16342 / 25.34865, col=adjustcolor("green",.4), lwd=3 )
hist( log2( ratio_N052611 ), breaks=50 )
abline( v = log2( 15.16342 / 25.34865 ), col=adjustcolor("green",.4), lwd=3 )
median_ratio_N052611 <- median( ratio_N052611, na.rm=TRUE )
abline( v = log2( median_ratio_N052611 ), col=adjustcolor("orange",.4), lwd=3 )
plot( avg_N052611, ratio_N052611 / median_ratio_N052611, log="xy", pch=".", ylim=c(.1, 10) )
abline( h = 1, col=adjustcolor("orange",.4), lwd=3 )
sapply( 1:8, function(i)
sapply( 1:8, function(j)
median( counts(dds)[,j] / counts(dds)[,i], na.rm=TRUE ) ) )
vref_counts <- apply( counts(dds), 1, function(x) prod(x) ^ (1/length(x)) )
head( vref_counts, 20 )
source("http://bioconductor.org/biocLite.R")
biocLite(c("biomaRt",
"circlize",
"ComplexHeatmap",
"corrplot",
"DESeq2",
"dplyr",
"DT",
"edgeR",
"ggplot2",
"limma",
"lsmeans",
"reshape2",
"spatstat",
"survival",
"plyr"))
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
source("http://bioconductor.org/biocLite.R")
BiocManager::install("biocLite")
biocLite(c("biomaRt",
"circlize",
"ComplexHeatmap",
"corrplot",
"DESeq2",
"dplyr",
"DT",
"edgeR",
"ggplot2",
"limma",
"lsmeans",
"reshape2",
"spatstat",
"survival",
"plyr"))
BiocManager::install("biocLite")
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
BiocManager::install("biocLite")
BiocManager::install("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
BiocManager::install("IMvigor210CoreBiologies_1.0.0.tar.gz")
source("http://bioconducor.org/biocLite.R")
getwd()
source("http://bioconducor.org/biocLite.R")
source("https://bioconducor.org/biocLite.R")
options(useHTTPS=FALSE, BioC_mirror="http://bioconductor.org")
source("https://bioconducor.org/biocLite.R")
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("biomaRt",
"circlize",
"ComplexHeatmap",
"corrplot",
"DESeq2",
"dplyr",
"DT",
"edgeR",
"ggplot2",
"limma",
"lsmeans",
"reshape2",
"spatstat",
"survival",
"plyr"))
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
BiocManager::install("IMvigor210CoreBiologies")
install.packages("IMvigor210CoreBiologies_1.0.0.tar.gz",
repos=NULL)
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/parameters_4_all.RData")
View(parameters)
setwd("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/")
# algorithm
alg <- "Multi_Task_EN"
# Cancer types
PanCancer_names <- c("GBM","LUAD", "LUSC", "SKCM", "STAD")
# Views
views <- c(pathways = 'gaussian',
immunecells = 'gaussian',
lrpairs = 'gaussian',
cytokinepairs = 'gaussian',
tfs = 'gaussian')
views_combination <- c(views[1], views[2], views[3], views[4], views[5],
views[c(1,2)], views[c(1,3)], views[c(1,4)],
views[c(2,3)], views[c(2,4)])
# general
load("data/all_genes_ICB_proxies.RData")
load("data/IPS_genes.RData")
load("data/list_top100pathways_responsive_genes.RData")
load("data/Ligand_Receptors_Rdata/CYTOKINE_pairs_subnetwork_only_TME.RData")
load("data/Ligand_Receptors_Rdata/LR_pairs_network_only_TME.RData")
# SKCM
models <- list()
models <- lapply(PanCancer, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
models <- lapply(names(views_combination), function(DataType){
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
return(model)
})
models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
models <- lapply(names(views_combination), function(DataType){
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
return(model)
})
PanCancer_names
names(views_combination)
views[c(1,2)]
views_combination
names(views_combination)
names(views_combination)[1]
names(views_combination)[5]
names(views_combination)[6]
names(views_combination)[7]
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
CancerType = "LUAD"
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
views_combination
views_combination <- list(views[1], views[2], views[3], views[4], views[5],
views[c(1,2)], views[c(1,3)], views[c(1,4)],
views[c(2,3)], views[c(2,4)])
views_combination
names(views_combination)
X = 1
paste(views_combination[[X]],collapse="_")
DataType <- paste(names(views_combination[[X]]),collapse="_")
DataType
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
# SKCM
models <- list()
models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]),collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
return(model)
})
DataType
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file)
which_file
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
which_file
# Views
views <- c(Pathways = 'gaussian',
ImmuneCells = 'gaussian',
LR.pairs = 'gaussian',
CYTOKINE.pairs = 'gaussian',
tfs = 'gaussian')
views_combination <- list(views[1], views[2], views[3], views[4], views[5],
views[c(1,2)], views[c(1,3)], views[c(1,4)],
views[c(2,3)], views[c(2,4)])
# SKCM
models <- list()
models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
return(model)
})
which_file
DataType
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
DataType
file
paste0("_with_cor_tasks_", DataType ,".RData")
file
grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
# SKCM
models <- list()
models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
return(model)
})
PanCancer_names
CancerType
models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
views_combination
file
# Views
views <- c(Pathways = 'gaussian',
ImmuneCells = 'gaussian',
LRpairs = 'gaussian',
CYTOKINEpairs = 'gaussian',
tfs = 'gaussian')
views_combination <- list(views[1], views[2], views[3], views[4], views[5],
views[c(1,2)], views[c(1,3)], views[c(1,4)],
views[c(2,3)], views[c(2,4)])
# SKCM
models <- list()
models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
return(model)
})
views_combination
# Views
views <- c(Pathways = 'gaussian',
ImmuneCells = 'gaussian',
LRpairs = 'gaussian',
CYTOKINEpairs = 'gaussian',
TFs = 'gaussian')
views_combination <- list(views[1], views[2], views[3], views[4], views[5],
views[c(1,2)], views[c(1,3)], views[c(1,4)],
views[c(2,3)], views[c(2,4)])
# general
load("data/all_genes_ICB_proxies.RData")
load("data/IPS_genes.RData")
load("data/list_top100pathways_responsive_genes.RData")
load("data/Ligand_Receptors_Rdata/CYTOKINE_pairs_subnetwork_only_TME.RData")
load("data/Ligand_Receptors_Rdata/LR_pairs_network_only_TME.RData")
# SKCM
models <- list()
models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
return(model)
})
# SKCM
models <- list()
models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
return(models)
})
View(models)
views_combination
sapply(1:length(views_combination), function(X) {
paste(names(views_combination[[X]]) ,collapse="_")
})
load("analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS.RData")
PanCancer.names <- names(TCGA.samples.pancancer_with_screen_quantiseg_IS)
setwd("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/")
# algorithm
alg <- "Multi_Task_EN"
# Cancer types
load("analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS.RData")
PanCancer.names <- names(TCGA.samples.pancancer_with_screen_quantiseg_IS)
# Views
views <- c(Pathways = 'gaussian',
ImmuneCells = 'gaussian',
LRpairs = 'gaussian',
CYTOKINEpairs = 'gaussian',
TFs = 'gaussian')
views_combination <- list(views[1], views[2], views[3], views[4], views[5],
views[c(1,2)], views[c(1,3)], views[c(1,4)],
views[c(2,3)], views[c(2,4)])
# general
load("data/all_genes_ICB_proxies.RData")
load("data/IPS_genes.RData")
load("data/list_top100pathways_responsive_genes.RData")
load("data/Ligand_Receptors_Rdata/CYTOKINE_pairs_subnetwork_only_TME.RData")
load("data/Ligand_Receptors_Rdata/LR_pairs_network_only_TME.RData")
# SKCM
models <- list()
models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
names(models) <- sapply(1:length(views_combination), function(X) {
paste(names(views_combination[[X]]) ,collapse="_")
})
return(models)
})
PanCancer_names <- names(TCGA.samples.pancancer_with_screen_quantiseg_IS)
# SKCM
trained_models <- list()
trained_models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
trained_models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
names(trained_models) <- sapply(1:length(views_combination), function(X) {
paste(names(views_combination[[X]]) ,collapse="_")
})
return(trained_models)
})
views_combination
trained_models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
file
file
file
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
PanCancer_names
CancerType <- "CESC"
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
file
views_combination
trained_models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
setwd("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/")
# algorithm
alg <- "Multi_Task_EN"
# Cancer types
load("analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS.RData")
PanCancer_names <- names(TCGA.samples.pancancer_with_screen_quantiseg_IS)
# Views
views <- c(Pathways = 'gaussian',
ImmuneCells = 'gaussian',
LRpairs = 'gaussian',
CYTOKINEpairs = 'gaussian',
TFs = 'gaussian')
views_combination <- list(views[1], views[2], views[3], views[4], views[5],
views[c(1,2)], views[c(1,3)], views[c(1,4)],
views[c(2,3)], views[c(2,4)])
# general
load("data/all_genes_ICB_proxies.RData")
load("data/IPS_genes.RData")
load("data/list_top100pathways_responsive_genes.RData")
load("data/Ligand_Receptors_Rdata/CYTOKINE_pairs_subnetwork_only_TME.RData")
load("data/Ligand_Receptors_Rdata/LR_pairs_network_only_TME.RData")
# SKCM
trained_models <- list()
trained_models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
trained_models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
names(trained_models) <- sapply(1:length(views_combination), function(X) {
paste(names(views_combination[[X]]) ,collapse="_")
})
return(trained_models)
})
# SKCM
trained_models <- list()
trained_models <- lapply(PanCancer_names, function(CancerType){
file <- dir(path = paste0("output/PanCancer_draft_v1/", CancerType), pattern = "all_cv_res_", full.names = T, recursive = F)
trained_models <- lapply(1:length(views_combination), function(X){
DataType <- paste(names(views_combination[[X]]) ,collapse="_")
# Load file
which_file <- grep(pattern = paste0("_with_cor_tasks_", DataType ,".RData"), file, fixed = T)
load(file[which_file])
model <- all_cv_res[[alg]]
return(model)
})
names(trained_models) <- sapply(1:length(views_combination), function(X) {
paste(names(views_combination[[X]]) ,collapse="_")
})
return(trained_models)
})
names(trained_models) <- PanCancer_names
View(trained_models)
save(trained_models, file = "data/learned_model_for_package.RData")
