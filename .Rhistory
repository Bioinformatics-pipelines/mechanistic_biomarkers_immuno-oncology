sapply(rawcounts.transcripts, class) # numeric
# Rows with non-valid HGNC symbols were removed.
HGNC_symbol <- sapply(strsplit(rownames(rawcounts.transcripts),"\\|"),function(X) return(X[1]))
rawcounts.transcripts <-  rawcounts.transcripts[-which(HGNC_symbol == "?"),]
HGNC_symbol <-HGNC_symbol[-which(HGNC_symbol == "?")]
HGNC_id <- sapply(strsplit(rownames(rawcounts.transcripts),"\\|"),function(X) return(X[2]))
# Rows corresponding to the same HGNC symbol were averaged.
if(anyDuplicated(HGNC_symbol) != 0){
idx <- which(duplicated(HGNC_symbol) == TRUE)
dup_genes <- HGNC_symbol[idx]
for (ii in dup_genes){
rawcounts.transcripts[which(HGNC_symbol %in% ii)[1],] <- colMeans(rawcounts.transcripts[which(HGNC_symbol %in% ii),])
rawcounts.transcripts <- rawcounts.transcripts[-which(HGNC_symbol %in% ii)[2],]
HGNC_symbol <- HGNC_symbol[-which(HGNC_symbol %in% ii)[2]]
}
}
# Remove ImmuneResponse genes
rownames(rawcounts.transcripts) <- HGNC_symbol
remove.genes <- match(all_genes_to_remove, rownames(rawcounts.transcripts))
rawcounts.transcripts <- rawcounts.transcripts[-remove.genes,]
# Sample screening:
#keep.samples.no_filter
#keep.samples.filter_prot
transcript.no_filter <- rawcounts.transcripts[, keep.samples.no_filter]
transcript.filter_prot <- rawcounts.transcripts[, keep.samples.filter_prot]
## Raw counts data filtered just with quanTIseq and Immune Signature ##
# Variance stabilizing transformation (DESeq2 package) for each TCGA study separately.
# It should generate the normalized data you can use with PROGENy.
# Primary tumors (01A in barcode) where a Tissue-matched normal (11A)
# Looking for duplicated participants. Participant ID = TCGA-XX-XXXX-XX
cat(anyDuplicated(colnames(transcript.no_filter)), "duplicates particpants in", Cancer, "(no filter) \n")
# DESeq2 package asks for an integer count matrix, a data frame with the sample info,
# and we use design =~1 to consider all samples as part of the same group.
# Constructing the column data:
# We examine the count matrix and column data to see if they are consistent
# in terms of sample order.
colData <- data.frame(id = colnames(transcript.no_filter)) # vst
# So, default log2 fold changes are calculated as tumor over normal
# Check patients from sample_info equal to patients from Raw_counts
if (all(colData == colnames(transcript.no_filter)) == FALSE) colnames(transcript.no_filter) <- colData
# Construction a DESeqDataSet:
transcript_integer.no_filter <- sapply(transcript.no_filter,as.integer) # Integers required
rownames(transcript_integer.no_filter) <- rownames(transcript.no_filter)
# Forced all to be data.frames($ operator)
dset <- DESeqDataSetFromMatrix(countData = transcript_integer.no_filter,
colData = colData,
design = ~ 1)
# Variance stabilization transformation
dset <- estimateSizeFactors(dset)
dset <- estimateDispersions(dset) # Takes long time, iteration for each gene.!!!!!!!!
gene_expr <- getVarianceStabilizedData(dset)
# Obtain PROGENy scores
Pathways.activity.no_filter <- progeny(gene_expr, scale = FALSE)
# ********************************************************************************** #
## Raw counts data filtered  with quanTIseq, Immune Signature and spatial TILs ##
# Variance stabilizing transformation (DESeq2 package) for each TCGA study separately.
# It should generate the normalized data you can use with PROGENy.
# Primary tumors (01A in barcode) where a Tissue-matched normal (11A)
# Looking for duplicated participants. Participant ID = TCGA-XX-XXXX-XX
cat(anyDuplicated(colnames(transcript.filter_prot)), "duplicates particpants in", Cancer, " (filter proteomics) \n")
# DESeq2 package asks for an integer count matrix, a data frame with the sample info,
# and we use design =~1 to consider all samples as part of the same group.
# Constructing the column data:
# We examine the count matrix and column data to see if they are consistent
# in terms of sample order.
colData.filter_prot <- data.frame(id = colnames(transcript.filter_prot)) # vst
# So, default log2 fold changes are calculated as tumor over normal
# Check patients from sample_info equal to patients from Raw_counts
if (all(colData.filter_prot == colnames(transcript.filter_prot)) == FALSE) colnames(transcript.filter_prot) <- colData.filter_prot
# Construction a DESeqDataSet:
transcript.filter_prot_integer <- sapply(transcript.filter_prot,as.integer) # Integers required
rownames(transcript.filter_prot_integer) <- rownames(transcript.filter_prot)
# Forced all to be data.frames($ operator)
dset.filter_prot <- DESeqDataSetFromMatrix(countData = transcript.filter_prot_integer,
colData = colData.filter_prot,
design = ~ 1)
# Variance stabilization transformation
dset.filter_prot <- estimateSizeFactors(dset.filter_prot)
dset.filter_prot <- estimateDispersions(dset.filter_prot) # Takes long time, iteration for each gene.!!!!!!!!
gene_expr.filter_prot <- getVarianceStabilizedData(dset.filter_prot)
# Obtain PROGENy scores
Pathways.activity.filter_prot <- progeny(gene_expr.filter_prot, scale = FALSE)
# Insert into DataViews/DataViews.filter_sTIL
DataViews.no_filter$pathways <- Pathways.activity.no_filter
DataViews.filter_prot$pathways <- Pathways.activity.filter_prot
save(DataViews.no_filter, file = paste0("data/PanCancer/",Cancer,"/new_remove_all_genes/DataViews_no_filter_",Cancer, ".RData"))
save(DataViews.filter_prot, file = paste0("data/PanCancer/",Cancer,"/new_remove_all_genes/DataViews_filter_prot_",Cancer, ".RData"))
})
#########################################################################################################
# Script to generate DataViews {with (11 cancer types) and without sTIL (18 cancer types)}:
# Input data -->
## Mechanistic DataViews:
### Pathways (PROGENy)
### Immunecells (quanTIseq)
### TFs (DoRothEAv1)
### sTIL (SpatialTIL)
### LRpairs (Ligand-Receptor pairs)
### CYTOKINEpairs (Cytokine pairs)
## RNA_PROT DataViews:
### transcript (transcriptomics)
### Protall (proteomics)
# Output data -->
## ImmuneResponse (proxy's of the response)
### IS
### CYT
### IPS
### IMPRES
# PanCancer analysis:
# TCGA samples available for quanTIseq and IS
## 18 Cancer types: BLCA BRCA CESC  CRC GBM HNSC KIRC KIRP LIHC LUAD LUSC OV PAAD PRAD SKCM STAD THCA UCEC
### TCGA_samples_available_screening_with_quanTIseq_IS.RData
# TCGA samples available for quanTIseq, IS and spatial TILs
## 11 Cancer types: BLCA BRCA CESC  CRC LUAD LUSC PAAD PRAD SKCM STAD UCEC
### TCGA_samples_available_screening_with_quanTIseq_IS_Spat.RData
# TCGA samples available for quanTIseq, IS and proteins (less samples)
## 18 Cancer types: BLCA BRCA CESC  CRC GBM HNSC KIRC KIRP LIHC LUAD LUSC OV PAAD PRAD SKCM STAD THCA UCEC
### TCGA_samples_available_screening_with_quanTIseq_IS_Spat.RData
# TCGA samples available for quanTIseq, IS , spatial TILs and proteins (less samples)
## 11 Cancer types: BLCA BRCA CESC  CRC LUAD LUSC PAAD PRAD SKCM STAD UCEC
### TCGA_samples_available_screening_with_quanTIseq_IS_Spat_prot.RData
# * CRC = COAD + READ
#########################################################################################################
# ****************
# working directory
setwd("~/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/")
# ****************
# packages
library(preprocessCore)
library(gdata)
library(DESeq2)
library(progeny)
library(viper)
# *****************
# functions
source("R/scaling_function.R")
# Derive IMPRES from Auslander
source("R/Signatures_response_ICBs/ObtainIMPRES.R")
# Derive IPS from Charaentong
source("R/Signatures_response_ICBs/ObtainIPS.R")
# Derive Roh Immune Signature Score
source("R/Signatures_response_ICBs/ObtainRohISS.R")
# Derive 12-Chemokine Signature Score
source("R/Signatures_response_ICBs/Obtain12chemokine.R")
# Derive Immune Signature Davoli
source("R/Signatures_response_ICBs/ObtainDavoliIS.R")
# Derive Proliferation Signature
source("R/Signatures_response_ICBs/ObtainProliferation.R")
# Derive IFNy Signature Ayers
source("R/Signatures_response_ICBs/ObtainIFnyAyers.R")
# Derive Expanded Immune Signature Ayers
source("R/Signatures_response_ICBs/ObtainExpandedImmuneAyers.R")
# Derive T cell Inflamd GEP Ayers
source("R/Signatures_response_ICBs/ObtainTcellInflamedAyers.R")
# Derive TIDE score Jiang
source("R/Signatures_response_ICBs/ObtainTIDE.R")
# Derive MSI score Fu
source("R/Signatures_response_ICBs/ObtainMSI.R")
# ****************
# functions from Federica
# Plot correlations including p-value, correlation value and correlation line
panel.cor <- function(x, y, digits=2, font.cor = 1, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- cor.test(x,y)$estimate
p <- cor.test(x,y)$p.value
txt_r <- format(r, digits=digits)
txt_p <- format(p, scientific = TRUE, digits=digits)
txt <- paste("cor=", txt_r, "\np=", txt_p, sep="")
if(txt_r >= 0.7 & txt_p >= 0.05) font.cor <- 2
text(0.5, 0.5, txt, cex = 1, font = font.cor)
}
panel.lm <- function (x, y, col = par("col"), bg = NA, pch = par("pch"), cex = 0.8, col.smooth = "#A1A1A1", ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
# abline(stats::lm(y ~ x),  col = col.smooth, ...)
abline(a=0, b=1,  col = col.smooth, ...)
}
# *****************
# Cancer types
load("./analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS.RData")
load("./analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS_prot.RData")
load("./analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS_Spat.RData")
PanCancer.names <- names(TCGA.samples.pancancer_with_screen_quantiseg_IS)
# *****************
# Regulons
# Load TF regulon genesets in VIPER format
load("data/raw_data_tcga/dorotheav1_viperRegulon.rdata")
# Clean TF names & explore object
names(viper_regulon) = sapply(strsplit(names(viper_regulon), split = ' - '), head, 1)
# # *****************
# # Initialize DataViews
# DataViews.no_filter <- vector("list", length = 7)
# names(DataViews.no_filter) <- c("pathways", "immunecells", "TFs", "sTIL", "LRpairs", "CYTOKINEpairs","transcript")
# DataViews.filter_prot <- vector("list", length = 4)
# names(DataViews.filter_prot) <- c("transcript", "Protall", "pathways", "TFs")
# ***************
# Remove transcripts used to build ImmuneResponse (IS,CYT,IPS,IMPRES,RohISS,Chemokine,Proliferation,IS_Davoli,IFNy,ExpandedImmune,
# T_cell_inflamed,TIDE,MSI)
sapply(PanCancer.names, function(Cancer){
file <- dir(paste0("data/raw_data_tcga/RNAseq/20160128_version/stddata__2016_01_28/", Cancer,"/20160128/",
"gdac.broadinstitute.org_", Cancer,".Merge_rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes__data.Level_3.2016012800.0.0"),
recursive = TRUE, pattern = "data.txt", full.names = TRUE)
# Extract the raw counts from the text files for each gene
data.transcripts <- read.csv(file, sep="\t",header=T,  row.names=1, stringsAsFactors=F, check.names=FALSE)
colnames(data.transcripts) <- substr(colnames(data.transcripts), 1, 15)
# TPM/scaled_estimate values (transcriptomics data)
get_estimates <- which(data.transcripts[1,] == "scaled_estimate")
estimates.transcripts <- data.frame(data.matrix(data.transcripts[-1,get_estimates]))
colnames(estimates.transcripts) <- gsub(".","-", colnames(estimates.transcripts), fixed = TRUE)
sapply(estimates.transcripts, class) # numeric
# Obtaining TPM (transcriptomics data)
TPM.transcripts <- estimates.transcripts * 1e6
# Log2 transformed
log2mas1.TPM.transcripts <- log2(TPM.transcripts + 1)
# Rows with non-valid HGNC symbols were removed.
HGNC_symbol <- sapply(strsplit(rownames(log2mas1.TPM.transcripts),"\\|"),function(X) return(X[1]))
log2mas1.TPM.transcripts <-  log2mas1.TPM.transcripts[-which(HGNC_symbol == "?"),]
HGNC_symbol <-HGNC_symbol[-which(HGNC_symbol == "?")]
HGNC_id <- sapply(strsplit(rownames(log2mas1.TPM.transcripts),"\\|"),function(X) return(X[2]))
# Rows corresponding to the same HGNC symbol were averaged.
if(anyDuplicated(HGNC_symbol) != 0){
idx <- which(duplicated(HGNC_symbol) == TRUE)
dup_genes <- HGNC_symbol[idx]
for (ii in dup_genes){
log2mas1.TPM.transcripts[which(HGNC_symbol %in% ii)[1],] <- colMeans(log2mas1.TPM.transcripts[which(HGNC_symbol %in% ii),])
log2mas1.TPM.transcripts <- log2mas1.TPM.transcripts[-which(HGNC_symbol %in% ii)[2],]
HGNC_symbol <- HGNC_symbol[-which(HGNC_symbol %in% ii)[2]]
}
}
# Remove ImmuneResponse genes
rownames(log2mas1.TPM.transcripts) <- HGNC_symbol
#remove.genes <- match(all_genes_to_remove, rownames(log2mas1.TPM.transcripts))
#log2mas1.TPM.transcripts <- log2mas1.TPM.transcripts[-remove.genes,]
# Sample screening:
keep.samples.no_filter <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS[[Cancer]], 1, 15)
keep.samples.filter_prot <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot[[Cancer]], 1, 15)
transcript.no_filter <- log2mas1.TPM.transcripts[, keep.samples.no_filter]
transcript.filter_prot <- log2mas1.TPM.transcripts[, keep.samples.filter_prot]
# Insert into DataViews/DataViews.filter_sTIL
load(paste0("data/PanCancer/",Cancer,"/new_keep_all_genes/DataViews_no_filter_",Cancer, ".RData"))
load(paste0("data/PanCancer/",Cancer,"/new_keep_all_genes/DataViews_filter_prot_",Cancer, ".RData"))
DataViews.no_filter$transcript <- as.data.frame(t(transcript.no_filter))
DataViews.filter_prot$transcript <- as.data.frame(t(transcript.filter_prot))
# ---------------------------------------------------------------------------------- #
# Obtain DoRothEA scores
# plot(rowMeans(rawcounts.transcripts), rowSds(as.matrix(rawcounts.transcripts)))
# plot(rowMeans(log2mas1.TPM.transcripts), rowSds(as.matrix(log2mas1.TPM.transcripts)))
# plot(rowMeans(TF_activity), rowSds(as.matrix(TF_activity)))
# Z score expression matrix of lo2(tpm + 1) (gene wisely as recommended by the authors)
Z.no_filter <- standarization(t(transcript.no_filter))
Z.filter_prot <- standarization(t(transcript.filter_prot))
# ********************************************************************************** #
## Raw counts data filtered just with quanTIseq and Immune Signature ##
E <- Z.no_filter
# redefine gene names to match transcripts for viper
newNames <- sapply(colnames(E), function(x){
# strsplit(x, "\\.")[[1]][1]
zz_tmp <- strsplit(x, "\\.")[[1]]
paste0(zz_tmp[1:(length(zz_tmp)-1)], collapse = "-")
})
colnames(E) <- newNames
E <- t(E)
all_regulated_transcripts <- do.call(c, lapply(viper_regulon, function(x){
names(x$tfmode)
}))
all_regulated_transcripts <- unique(all_regulated_transcripts)
all_TF <- names(viper_regulon)
# check what is the percentage of regulated transcripts and TF that we have in our data
cat(" percentage of regulated transcripts = ", sum(all_regulated_transcripts %in%  newNames)*100/length(all_regulated_transcripts), "\n")
cat(" percentage of TF = ", sum(all_TF %in% newNames)*100/length(all_TF), "\n")
# Run viper
TF_activity.no_filter <- viper(eset = E, regulon = viper_regulon, nes = T,
method = 'none', minsize = 4, eset.filter = F)
# ********************************************************************************** #
## Raw counts data filtered  with quanTIseq, Immune Signature and spatial TILs ##
E <- Z.filter_prot
# redefine gene names to match transcripts for viper
newNames <- sapply(colnames(E), function(x){
# strsplit(x, "\\.")[[1]][1]
zz_tmp <- strsplit(x, "\\.")[[1]]
paste0(zz_tmp[1:(length(zz_tmp)-1)], collapse = "-")
})
colnames(E) <- newNames
E <- t(E)
all_regulated_transcripts <- do.call(c, lapply(viper_regulon, function(x){
names(x$tfmode)
}))
all_regulated_transcripts <- unique(all_regulated_transcripts)
all_TF <- names(viper_regulon)
# check what is the percentage of regulated transcripts and TF that we have in our data
cat(" percentage of regulated transcripts = ", sum(all_regulated_transcripts %in%  newNames)*100/length(all_regulated_transcripts), "\n")
cat(" percentage of TF = ", sum(all_TF %in% newNames)*100/length(all_TF), "\n")
# Run viper
TF_activity.filter_prot <- viper(eset = E, regulon = viper_regulon, nes = T,
method = 'none', minsize = 4, eset.filter = F)
# Insert into DataViews/DataViews.filter_sTIL
DataViews.no_filter$TFs <- as.data.frame(t(TF_activity.no_filter))
DataViews.filter_prot$TFs <- as.data.frame(t(TF_activity.filter_prot))
# ----------------------------------------------------------- #
# Obtaining raw counts (Pathways data)
get_rawcounts <- which(data.transcripts[1,] == "raw_count")
rawcounts.transcripts <- data.frame(data.matrix(data.transcripts[-1,get_rawcounts]))
colnames(rawcounts.transcripts) <- gsub(".","-", colnames(rawcounts.transcripts), fixed = TRUE)
sapply(rawcounts.transcripts, class) # numeric
# Rows with non-valid HGNC symbols were removed.
HGNC_symbol <- sapply(strsplit(rownames(rawcounts.transcripts),"\\|"),function(X) return(X[1]))
rawcounts.transcripts <-  rawcounts.transcripts[-which(HGNC_symbol == "?"),]
HGNC_symbol <-HGNC_symbol[-which(HGNC_symbol == "?")]
HGNC_id <- sapply(strsplit(rownames(rawcounts.transcripts),"\\|"),function(X) return(X[2]))
# Rows corresponding to the same HGNC symbol were averaged.
if(anyDuplicated(HGNC_symbol) != 0){
idx <- which(duplicated(HGNC_symbol) == TRUE)
dup_genes <- HGNC_symbol[idx]
for (ii in dup_genes){
rawcounts.transcripts[which(HGNC_symbol %in% ii)[1],] <- colMeans(rawcounts.transcripts[which(HGNC_symbol %in% ii),])
rawcounts.transcripts <- rawcounts.transcripts[-which(HGNC_symbol %in% ii)[2],]
HGNC_symbol <- HGNC_symbol[-which(HGNC_symbol %in% ii)[2]]
}
}
# Remove ImmuneResponse genes
rownames(rawcounts.transcripts) <- HGNC_symbol
#remove.genes <- match(all_genes_to_remove, rownames(rawcounts.transcripts))
#rawcounts.transcripts <- rawcounts.transcripts[-remove.genes,]
# Sample screening:
#keep.samples.no_filter
#keep.samples.filter_prot
transcript.no_filter <- rawcounts.transcripts[, keep.samples.no_filter]
transcript.filter_prot <- rawcounts.transcripts[, keep.samples.filter_prot]
## Raw counts data filtered just with quanTIseq and Immune Signature ##
# Variance stabilizing transformation (DESeq2 package) for each TCGA study separately.
# It should generate the normalized data you can use with PROGENy.
# Primary tumors (01A in barcode) where a Tissue-matched normal (11A)
# Looking for duplicated participants. Participant ID = TCGA-XX-XXXX-XX
cat(anyDuplicated(colnames(transcript.no_filter)), "duplicates particpants in", Cancer, "(no filter) \n")
# DESeq2 package asks for an integer count matrix, a data frame with the sample info,
# and we use design =~1 to consider all samples as part of the same group.
# Constructing the column data:
# We examine the count matrix and column data to see if they are consistent
# in terms of sample order.
colData <- data.frame(id = colnames(transcript.no_filter)) # vst
# So, default log2 fold changes are calculated as tumor over normal
# Check patients from sample_info equal to patients from Raw_counts
if (all(colData == colnames(transcript.no_filter)) == FALSE) colnames(transcript.no_filter) <- colData
# Construction a DESeqDataSet:
transcript_integer.no_filter <- sapply(transcript.no_filter,as.integer) # Integers required
rownames(transcript_integer.no_filter) <- rownames(transcript.no_filter)
# Forced all to be data.frames($ operator)
dset <- DESeqDataSetFromMatrix(countData = transcript_integer.no_filter,
colData = colData,
design = ~ 1)
# Variance stabilization transformation
dset <- estimateSizeFactors(dset)
dset <- estimateDispersions(dset) # Takes long time, iteration for each gene.!!!!!!!!
gene_expr <- getVarianceStabilizedData(dset)
# Obtain PROGENy scores
Pathways.activity.no_filter <- progeny(gene_expr, scale = FALSE)
# ********************************************************************************** #
## Raw counts data filtered  with quanTIseq, Immune Signature and spatial TILs ##
# Variance stabilizing transformation (DESeq2 package) for each TCGA study separately.
# It should generate the normalized data you can use with PROGENy.
# Primary tumors (01A in barcode) where a Tissue-matched normal (11A)
# Looking for duplicated participants. Participant ID = TCGA-XX-XXXX-XX
cat(anyDuplicated(colnames(transcript.filter_prot)), "duplicates particpants in", Cancer, " (filter proteomics) \n")
# DESeq2 package asks for an integer count matrix, a data frame with the sample info,
# and we use design =~1 to consider all samples as part of the same group.
# Constructing the column data:
# We examine the count matrix and column data to see if they are consistent
# in terms of sample order.
colData.filter_prot <- data.frame(id = colnames(transcript.filter_prot)) # vst
# So, default log2 fold changes are calculated as tumor over normal
# Check patients from sample_info equal to patients from Raw_counts
if (all(colData.filter_prot == colnames(transcript.filter_prot)) == FALSE) colnames(transcript.filter_prot) <- colData.filter_prot
# Construction a DESeqDataSet:
transcript.filter_prot_integer <- sapply(transcript.filter_prot,as.integer) # Integers required
rownames(transcript.filter_prot_integer) <- rownames(transcript.filter_prot)
# Forced all to be data.frames($ operator)
dset.filter_prot <- DESeqDataSetFromMatrix(countData = transcript.filter_prot_integer,
colData = colData.filter_prot,
design = ~ 1)
# Variance stabilization transformation
dset.filter_prot <- estimateSizeFactors(dset.filter_prot)
dset.filter_prot <- estimateDispersions(dset.filter_prot) # Takes long time, iteration for each gene.!!!!!!!!
gene_expr.filter_prot <- getVarianceStabilizedData(dset.filter_prot)
# Obtain PROGENy scores
Pathways.activity.filter_prot <- progeny(gene_expr.filter_prot, scale = FALSE)
# Insert into DataViews/DataViews.filter_sTIL
DataViews.no_filter$pathways <- Pathways.activity.no_filter
DataViews.filter_prot$pathways <- Pathways.activity.filter_prot
save(DataViews.no_filter, file = paste0("data/PanCancer/",Cancer,"/new_keep_all_genes/DataViews_no_filter_",Cancer, ".RData"))
save(DataViews.filter_prot, file = paste0("data/PanCancer/",Cancer,"/new_keep_all_genes/DataViews_filter_prot_",Cancer, ".RData"))
})
load("~/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/data/PanCancer/BLCA/new_keep_all_genes/DataViews_no_filter_BLCA.RData")
load("~/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/data/PanCancer/BLCA/new_remove_all_genes/DataViews_no_filter_BLCA.RData")
load("~/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/data/PanCancer/BLCA/new/DataViews_no_filter_BLCA.RData")
setwd("~/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/")
setwd("~/Desktop/PhD_TUE/Github_model/repository/mechanistic_biomarkers_immuno-oncology/")
load("data/PanCancer/BLCA/new_keep_all_genes/DataViews_no_filter_BLCA.RData")
keep_all.data <- DataViews.no_filter
remove_ISCYT.data <- DataViews.no_filter
# ****************
# functions from Federica
# Plot correlations including p-value, correlation value and correlation line
panel.cor <- function(x, y, digits=2, font.cor = 1, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- cor.test(x,y)$estimate
p <- cor.test(x,y)$p.value
txt_r <- format(r, digits=digits)
txt_p <- format(p, scientific = TRUE, digits=digits)
txt <- paste("cor=", txt_r, "\np=", txt_p, sep="")
if(txt_r >= 0.7 & txt_p >= 0.05) font.cor <- 2
text(0.5, 0.5, txt, cex = 1, font = font.cor)
}
panel.lm <- function (x, y, col = par("col"), bg = NA, pch = par("pch"), cex = 0.8, col.smooth = "#A1A1A1", ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
# abline(stats::lm(y ~ x),  col = col.smooth, ...)
abline(a=0, b=1,  col = col.smooth, ...)
}
load("data/PanCancer/BLCA/new_remove_all_genes/DataViews_no_filter_BLCA.RData")
remove_all.data <- DataViews.no_filter
load("data/PanCancer/BLCA/new_keep_all_genes/DataViews_no_filter_BLCA.RData")
keep_all.data <- DataViews.no_filter
load("data/PanCancer/BLCA/new_remove_all_genes/DataViews_no_filter_BLCA.RData")
remove_all.data <- DataViews.no_filter
load("data/PanCancer/BLCA/new/DataViews_no_filter_BLCA.RData")
remove_ISCYT.data <- DataViews.no_filter
pairs(keep_all.data$pathways, remove_all.data$pathways, upper.panel = panel.cor, lower.panel = panel.lm)
pairs(as.matrix(keep_all.data$pathways), as.matrix(remove_all.data$pathways),
upper.panel = panel.cor, lower.panel = panel.lm)
as.matrix(keep_all.data$pathways)
View(remove_all.data)
View(keep_all.data)
pairs(as.matrix(keep_all.data$pathways) ~ as.matrix(remove_all.data$pathways),
upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
pairs(as.vector(keep_all.data$pathways) ~ as.vector(remove_all.data$pathways),
upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
pairs(as.vector(keep_all.data$pathways),as.vector(remove_all.data$pathways),
upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
as.vector(keep_all.data$pathways)
View(keep_all.data)
keep_all.data[["pathways"]]
?pairs
?pairs
plot(as.vector(keep_all.data$pathways),as.vector(remove_all.data$pathways),
upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8))
plot(as.vector(keep_all.data$pathways),as.vector(remove_all.data$pathways),
upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
pairs(~., data = keep_all.data$pathways,
upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
warnings
warnings()
p <- cor.test(x,y)$p.value
txt <- paste("cor=", txt_r, "\np=", txt_p, sep="")
p <- cor.test(x,y)$p.value
# ****************
# functions from Federica
# Plot correlations including p-value, correlation value and correlation line
panel.cor <- function(x, y, digits=2, font.cor = 1, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- cor.test(x,y)$estimate
p <- cor.test(x,y)$p.value
txt_r <- format(r, digits=digits)
txt_p <- format(p, scientific = TRUE, digits=digits)
txt <- paste("cor=", txt_r, "\np=", txt_p, sep="")
if(txt_r >= 0.7 & txt_p >= 0.05) font.cor <- 2
text(0.5, 0.5, txt, cex = 1, font = font.cor)
}
panel.lm <- function (x, y, col = par("col"), bg = NA, pch = par("pch"), cex = 0.8, col.smooth = "#A1A1A1", ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
# abline(stats::lm(y ~ x),  col = col.smooth, ...)
abline(a=0, b=1,  col = col.smooth, ...)
}
pairs(~., data = keep_all.data$pathways, upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
pairs(~., data = remove_all.data$pathways, upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
plot(as.vector(keep_all.data$pathways),as.vector(remove_ISCYT.data$pathways),
upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
View(remove_ISCYT.data)
View(remove_all.data)
View(remove_ISCYT.data)
plot(as.vector(keep_all.data$pathways),as.vector(as.matrix(remove_ISCYT.data$pathways)),
upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
load("data/PanCancer/BLCA/new_keep_all_genes/DataViews_no_filter_BLCA.RData")
keep_all.data <- DataViews.no_filter
load("data/PanCancer/BLCA/new_remove_all_genes/DataViews_no_filter_BLCA.RData")
remove_all.data <- DataViews.no_filter
load("data/PanCancer/BLCA/new/DataViews_no_filter_BLCA.RData")
remove_ISCYT.data <- DataViews.no_filter
View(keep_all.data)
View(keep_all.data)
View(remove_all.data)
View(remove_ISCYT.data)
pairs(~., data = remove_ISCYT.data$pathways, upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
plot(as.vector(keep_all.data$TFs),as.vector(as.matrix(remove_ISCYT.data$TFs)),
upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
View(remove_ISCYT.data)
plot(as.vector(keep_all.data$TFs),as.vector(as.matrix(remove_ISCYT.data$TFs))
plot(as.vector(keep_all.data$TFs),as.vector(remove_ISCYT.data$TFs))
as.vector(remove_ISCYT.data$TFs)
plot(as.vector(keep_all.data$TFs),as.vector(as.matrix(remove_ISCYT.data$TFs)))
as.vector(keep_all.data$TFs)
plot(as.vector(as.matrix(keep_all.data$TFs)),as.vector(as.matrix(remove_ISCYT.data$TFs)))
as.vector(as.matrix(keep_all.data$TFs))
as.vector(as.matrix(remove_ISCYT.data$TFs))
View(remove_all.data)
View(keep_all.data)
View(remove_all.data)
View(keep_all.data)
View(remove_all.data)
View(remove_ISCYT.data)
