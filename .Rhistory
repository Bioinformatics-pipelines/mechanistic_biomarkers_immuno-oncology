MSI.filter_Spat <- MSI[keep.samples.filter_Spat, , drop = FALSE]
rownames(MSI.filter_Spat) <- substr(rownames(MSI.filter_Spat), 1, 12)
#tmp <- intersect( rownames(MSI.filter_Spat), substr(rownames(IMPRES.paper), 1, 12))
#pairs(MSI.filter_Spat[tmp,] ~ IMPRES.paper[tmp,2], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
#cat("\n","Correlation_no_filter =", cor(as.vector(MSI.filter_Spat[tmp,]), as.vector(IMPRES.paper[tmp,2]), method = "spearman"), "\n")
ImmuneResponse_filter_spat$MSI <- MSI.filter_Spat
save(ImmuneResponse_filter_spat, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
}
# ------------------------------------------------------------------------------------------------------- #
## Filter Prot
if(Cancer %in% names(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot)){
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_prot_",Cancer, ".RData"))
keep.samples.filter_prot <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot[[Cancer]], 1, 15)
MSI.filter_prot <- MSI[keep.samples.filter_prot, , drop = FALSE]
rownames(MSI.filter_prot) <- substr(rownames(MSI.filter_prot), 1, 12)
#tmp <- intersect(rownames(MSI.filter_prot) , substr(rownames(IMPRES.paper), 1, 12))
#pairs(MSI.filter_prot[tmp,] ~ IMPRES.paper[tmp,2], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
#cat("\n","Correlation_no_filter =", cor(as.vector(MSI.filter_prot[tmp,]), as.vector(IMPRES.paper[tmp,2]), method = "spearman"), "\n")
ImmuneResponse.filter_prot$MSI <- MSI.filter_prot
save(ImmuneResponse.filter_prot, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_prot_",Cancer, ".RData"))
}
})
Cancer = "BLCA"
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
keep.samples.filter_Spat <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs[[Cancer]], 1, 15)
MSI.filter_Spat <- MSI[keep.samples.filter_Spat, , drop = FALSE]
# Compute MSI
MSI <- ObtainMSI(TPM.transcripts)
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_no_filter_",Cancer, ".RData"))
keep.samples.no_filter <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS[[Cancer]], 1, 15)
MSI.no_filter <- MSI[keep.samples.no_filter, , drop = FALSE]
rownames(MSI.no_filter) <- substr(rownames(MSI.no_filter), 1, 12)
ImmuneResponse.no_filter$MSI <- MSI.no_filter
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
keep.samples.filter_Spat <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs[[Cancer]], 1, 15)
MSI.filter_Spat <- MSI[keep.samples.filter_Spat, , drop = FALSE]
rownames(MSI.filter_Spat) <- substr(rownames(MSI.filter_Spat), 1, 12)
ImmuneResponse_filter_spat$MSI <- MSI.filter_Spat
View(ImmuneResponse.filter_spat)
ImmuneResponse_filter_spat$MSI
ImmuneResponse_filter_spat
ImmuneResponse.filter_spat
View(ImmuneResponse.no_filter)
# *****************
# functions
source("scaling_function.R")
# Derive CYT from Rooney
source("Signatures_response_ICBs/ObtainCYT.R")
# Derive IMPRES from Auslander
source("Signatures_response_ICBs/ObtainIMPRES.R")
# Derive IPS from Charaentong
source("Signatures_response_ICBs/ObtainIPS.R")
# Derive Roh Immune Signature Score
source("Signatures_response_ICBs/ObtainRohISS.R")
# Derive 12-Chemokine Signature Score
source("Signatures_response_ICBs/Obtain12chemokine.R")
# Derive Immune Signature Davoli
source("Signatures_response_ICBs/ObtainDavoliIS.R")
# Derive Proliferation Signature
source("Signatures_response_ICBs/ObtainProliferation.R")
# Derive IFNy Signature Ayers
source("Signatures_response_ICBs/ObtainIFnyAyers.R")
# Derive Expanded Immune Signature Ayers
source("Signatures_response_ICBs/ObtainExpandedImmuneAyers.R")
# Derive T cell Inflamd GEP Ayers
source("Signatures_response_ICBs/ObtainTcellInflamedAyers.R")
# Derive TIDE score Jiang
source("Signatures_response_ICBs/ObtainTIDE.R")
# Derive MSI score Fu
source("Signatures_response_ICBs/ObtainMSI.R")
IPS.paper <- read.csv("../data/raw_data_tcga/patientsAll_IPS_literature.csv", row.names = 1, header = TRUE, sep = "\t")
IPS.paper <- IPS.paper[,"ips_ctla4_neg_pd1_neg", drop = FALSE]
IMPRES.paper <- read.csv("../data/raw_data_tcga/IMPRES_TCGA.csv", row.names = 1, header = T)
sapply(PanCancer.names, function(Cancer){
file <- dir(paste0("../data/raw_data_tcga/RNAseq/20160128_version/stddata__2016_01_28/", Cancer,"/20160128/",
"gdac.broadinstitute.org_", Cancer,".Merge_rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes__data.Level_3.2016012800.0.0"),
recursive = TRUE, pattern = "data.txt", full.names = TRUE)
# Extract the raw counts from the text files for each gene
data.transcripts <- read.csv(file, sep="\t",header=T,  row.names=1, stringsAsFactors=F, check.names=FALSE)
colnames(data.transcripts) <- substr(colnames(data.transcripts), 1, 15)
# TPM/scaled_estimate values (transcriptomics data)
get_estimates <- which(data.transcripts[1,] == "scaled_estimate")
estimates.transcripts <- data.frame(data.transcripts[-1,get_estimates])
colnames(estimates.transcripts) <- gsub(".","-", colnames(estimates.transcripts), fixed = TRUE)
genes <- rownames(estimates.transcripts)
estimates.transcripts <- sapply(estimates.transcripts, as.numeric) # numeric
# Obtaining TPM (transcriptomics data)
TPM.transcripts <- estimates.transcripts * 1e6
rownames(TPM.transcripts) <- genes
# Rows with non-valid HGNC symbols were removed.
HGNC_symbol <- sapply(strsplit(rownames(TPM.transcripts),"\\|"),function(X) return(X[1]))
TPM.transcripts <-  TPM.transcripts[-which(HGNC_symbol == "?"),]
HGNC_symbol <-HGNC_symbol[-which(HGNC_symbol == "?")]
HGNC_id <- sapply(strsplit(rownames(TPM.transcripts),"\\|"),function(X) return(X[2]))
# Rows corresponding to the same HGNC symbol were averaged.
if(anyDuplicated(HGNC_symbol) != 0){
idx <- which(duplicated(HGNC_symbol) == TRUE)
dup_genes <- HGNC_symbol[idx]
for (ii in dup_genes){
TPM.transcripts[which(HGNC_symbol %in% ii)[1],] <- colMeans(TPM.transcripts[which(HGNC_symbol %in% ii),])
TPM.transcripts <- TPM.transcripts[-which(HGNC_symbol %in% ii)[2],]
HGNC_symbol <- HGNC_symbol[-which(HGNC_symbol %in% ii)[2]]
}
}
# Remove ImmuneResponse genes
rownames(TPM.transcripts) <- HGNC_symbol
# Compute IMPRES
IMPRES <- ObtainIMPRES(TPM.transcripts)
IPS <- ObtainIPS(TPM.transcripts)
MSI <- ObtainMSI(TPM.transcripts)
# ****************
# IMPRES
# ****************
# Sample screening:
# ------------------------------------------------------------------------------------------------------- #
## No filter
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_no_filter_",Cancer, ".RData"))
keep.samples.no_filter <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS[[Cancer]], 1, 15)
IMPRES.no_filter <- IMPRES[keep.samples.no_filter, , drop = FALSE]
rownames(IMPRES.no_filter) <- substr(rownames(IMPRES.no_filter), 1, 12)
tmp <- intersect( rownames(IMPRES.no_filter), substr(rownames(IMPRES.paper), 1, 12))
#pairs(IMPRES.no_filter[tmp,] ~ IMPRES.paper[tmp,2], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
cat("\n","Correlation_no_filter =", cor(as.vector(IMPRES.no_filter[tmp,]), as.vector(IMPRES.paper[tmp,2]), method = "spearman"), "\n")
ImmuneResponse.no_filter$IMPRES <- IMPRES.no_filter
save(ImmuneResponse.no_filter, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_no_filter_",Cancer, ".RData"))
# ------------------------------------------------------------------------------------------------------- #
## Filter Spat
if(Cancer %in% names(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs)){
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
keep.samples.filter_Spat <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs[[Cancer]], 1, 15)
IMPRES.filter_Spat <- IMPRES[keep.samples.filter_Spat, , drop = FALSE]
rownames(IMPRES.filter_Spat) <- substr(rownames(IMPRES.filter_Spat), 1, 12)
tmp <- intersect( rownames(IMPRES.filter_Spat), substr(rownames(IMPRES.paper), 1, 12))
#pairs(IMPRES.filter_Spat[tmp,] ~ IMPRES.paper[tmp,2], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
cat("\n","Correlation_no_filter =", cor(as.vector(IMPRES.filter_Spat[tmp,]), as.vector(IMPRES.paper[tmp,2]), method = "spearman"), "\n")
ImmuneResponse.filter_spat$IMPRES <- IMPRES.filter_Spat
save(ImmuneResponse.filter_spat, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
}
# ------------------------------------------------------------------------------------------------------- #
## Filter Prot
if(Cancer %in% names(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot)){
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_prot_",Cancer, ".RData"))
keep.samples.filter_prot <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot[[Cancer]], 1, 15)
IMPRES.filter_prot <- IMPRES[keep.samples.filter_prot, , drop = FALSE]
rownames(IMPRES.filter_prot) <- substr(rownames(IMPRES.filter_prot), 1, 12)
tmp <- intersect(rownames(IMPRES.filter_prot) , substr(rownames(IMPRES.paper), 1, 12))
#pairs(IMPRES.filter_prot[tmp,] ~ IMPRES.paper[tmp,2], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
cat("\n","Correlation_no_filter =", cor(as.vector(IMPRES.filter_prot[tmp,]), as.vector(IMPRES.paper[tmp,2]), method = "spearman"), "\n")
ImmuneResponse.filter_prot$IMPRES <- IMPRES.filter_prot
save(ImmuneResponse.filter_prot, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_prot_",Cancer, ".RData"))
}
# ****************
# IPS #
# ****************
# Sample screening:
# ------------------------------------------------------------------------------------------------------- #
## No filter
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_no_filter_",Cancer, ".RData"))
keep.samples.no_filter <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS[[Cancer]],1 ,15)
IPS.no_filter <- IPS[keep.samples.no_filter, 1, drop = FALSE]
rownames(IPS.no_filter) <- substr(rownames(IPS.no_filter), 1, 12)
tmp <- intersect(rownames(IPS.no_filter), substr(rownames(IPS.paper), 1, 12))
#pairs(IPS.no_filter[tmp,] ~ IPS.paper[tmp,], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
cat("\n","Correlation_no_filter =", cor(as.vector(IPS.no_filter[tmp,]), as.vector(IPS.paper[tmp,]), method = "spearman"), "\n")
ImmuneResponse.no_filter$IPS <- IPS.no_filter
save(ImmuneResponse.no_filter, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_no_filter_",Cancer, ".RData"))
# ------------------------------------------------------------------------------------------------------- #
## Filter Spat
if(Cancer %in% names(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs)){
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
keep.samples.filter_Spat <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs[[Cancer]], 1, 15)
IPS.filter_Spat <- IPS[keep.samples.filter_Spat, , drop = FALSE]
rownames(IPS.filter_Spat) <- substr(rownames(IPS.filter_Spat), 1, 12)
tmp <- intersect(rownames(IPS.filter_Spat), substr(rownames(IPS.paper), 1, 12))
#pairs(IPS.filter_Spat[tmp,] ~ IPS.paper[tmp,], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
cat("\n","Correlation_filter_Spat =", cor(as.vector(IPS.filter_Spat[tmp,]), as.vector(IPS.paper[tmp,]), method = "spearman"), "\n")
ImmuneResponse.filter_spat$IPS <- IPS.filter_Spat
save(ImmuneResponse.filter_spat, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
}
## Filter Prot
# ------------------------------------------------------------------------------------------------------- #
if(Cancer %in% names(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot)){
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_prot_",Cancer, ".RData"))
keep.samples.filter_prot <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot[[Cancer]], 1, 15)
IPS.filter_prot <- IPS[keep.samples.filter_prot, , drop = FALSE]
rownames(IPS.filter_prot) <- substr(rownames(IPS.filter_prot), 1, 12)
tmp <- intersect( rownames(IPS.filter_prot), substr(rownames(IPS.paper), 1, 12))
#pairs(IPS.filter_prot[tmp,] ~ IPS.paper[tmp,], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
cat("\n","Correlation_filter_prot =", cor(as.vector(IPS.filter_prot[tmp,]), as.vector(IPS.paper[tmp,]), method = "spearman"), "\n")
ImmuneResponse.filter_prot$IPS <- IPS.filter_prot
save(ImmuneResponse.filter_prot, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_prot_",Cancer, ".RData"))
}
# ****************
# MSI score
# ****************
# Sample screening:
# ------------------------------------------------------------------------------------------------------- #
## No filter
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_no_filter_",Cancer, ".RData"))
keep.samples.no_filter <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS[[Cancer]], 1, 15)
MSI.no_filter <- MSI[keep.samples.no_filter, , drop = FALSE]
rownames(MSI.no_filter) <- substr(rownames(MSI.no_filter), 1, 12)
#tmp <- intersect( rownames(MSI.no_filter), substr(rownames(IMPRES.paper), 1, 12))
#pairs(MSI.no_filter[tmp,] ~ IMPRES.paper[tmp,2], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
#cat("\n","Correlation_no_filter =", cor(as.vector(MSI.no_filter[tmp,]), as.vector(IMPRES.paper[tmp,2]), method = "spearman"), "\n")
ImmuneResponse.no_filter$MSI <- MSI.no_filter
save(ImmuneResponse.no_filter, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_no_filter_",Cancer, ".RData"))
# ------------------------------------------------------------------------------------------------------- #
## Filter Spat
if(Cancer %in% names(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs)){
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
keep.samples.filter_Spat <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs[[Cancer]], 1, 15)
MSI.filter_Spat <- MSI[keep.samples.filter_Spat, , drop = FALSE]
rownames(MSI.filter_Spat) <- substr(rownames(MSI.filter_Spat), 1, 12)
#tmp <- intersect( rownames(MSI.filter_Spat), substr(rownames(IMPRES.paper), 1, 12))
#pairs(MSI.filter_Spat[tmp,] ~ IMPRES.paper[tmp,2], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
#cat("\n","Correlation_no_filter =", cor(as.vector(MSI.filter_Spat[tmp,]), as.vector(IMPRES.paper[tmp,2]), method = "spearman"), "\n")
ImmuneResponse.filter_spat$MSI <- MSI.filter_Spat
save(ImmuneResponse.filter_spat, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
}
# ------------------------------------------------------------------------------------------------------- #
## Filter Prot
if(Cancer %in% names(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot)){
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_prot_",Cancer, ".RData"))
keep.samples.filter_prot <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot[[Cancer]], 1, 15)
MSI.filter_prot <- MSI[keep.samples.filter_prot, , drop = FALSE]
rownames(MSI.filter_prot) <- substr(rownames(MSI.filter_prot), 1, 12)
#tmp <- intersect(rownames(MSI.filter_prot) , substr(rownames(IMPRES.paper), 1, 12))
#pairs(MSI.filter_prot[tmp,] ~ IMPRES.paper[tmp,2], upper.panel = panel.cor,lower.panel = panel.lm, cex.labels = 0.8)
#cat("\n","Correlation_no_filter =", cor(as.vector(MSI.filter_prot[tmp,]), as.vector(IMPRES.paper[tmp,2]), method = "spearman"), "\n")
ImmuneResponse.filter_prot$MSI <- MSI.filter_prot
save(ImmuneResponse.filter_prot, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_prot_",Cancer, ".RData"))
}
})
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/BLCA/ImmuneResponse_no_filter_BLCA.RData")
View(ImmuneResponse.no_filter)
View(ImmuneResponse.no_filter)
View(ImmuneResponse.filter_spat)
View(ImmuneResponse.filter_prot)
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/BLCA/ImmuneResponse_filter_spat_BLCA.RData")
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/BLCA/ImmuneResponse_filter_prot_BLCA.RData")
View(ImmuneResponse.filter_prot)
View(ImmuneResponse.filter_spat)
View(ImmuneResponse.filter_spat)
View(ImmuneResponse.filter_prot)
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/HNSC/ImmuneResponse_filter_prot_HNSC.RData")
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/HNSC/ImmuneResponse_filter_spat_HNSC.RData")
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/HNSC/ImmuneResponse_no_filter_HNSC.RData")
## log2(TPM + 1)
log2.gene.tpm <- as.data.frame(log2(gene.tpm + 1))
## Quantile normalization
log2.gene.tpm.norm <- normalize.quantiles(log2.gene.tpm)
## Quantile normalization
log2.gene.tpm.norm <- normalize.quantiles(as.matrix(log2.gene.tpm))
dimnames(log2.gene.tpm.norm) <- dimnames(log2.gene.tpm)
dimnames(log2.gene.tpm.norm)
## Mean-centralization: substract gene average across all conditions
average.gene <- rowMeans(log2.gene.tpm.norm)
log2.gene.tpm.norm.all.conditions <- sweep(log2.gene.tpm.norm, 1, average.gene, FUN = "-")
# Derive TIDE score Jiang
source("Signatures_response_ICBs/ObtainTIDE.R")
install.packages("reticulate")
Cancer
paste0("/anaconda3/bin/tidepy ", "../data/data_processed_TIDE/log2mas1TPM_norm_", Cancer,".txt", " -o output_TIDE_norm_",Cancer,".txt -c Other")
getwd()
getwd()
paste0("cd", "/Users/Oscar/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/"
)
paste0("cd"," /Users/Oscar/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/"))
paste0("cd"," /Users/Oscar/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/")
system(paste0("cd"," /Users/Oscar/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/"))
# Derive TIDE score Jiang
source("Signatures_response_ICBs/ObtainTIDE.R")
Cancer
## log2(TPM + 1)
log2.gene.tpm <- as.data.frame(log2(gene.tpm + 1))
## Quantile normalization
log2.gene.tpm.norm <- normalize.quantiles(as.matrix(log2.gene.tpm))
dimnames(log2.gene.tpm.norm) <- dimnames(log2.gene.tpm)
# ************
# Packages
library(preprocessCore)
## log2(TPM + 1)
log2.gene.tpm <- as.data.frame(log2(gene.tpm + 1))
## Quantile normalization
log2.gene.tpm.norm <- normalize.quantiles(as.matrix(log2.gene.tpm))
dimnames(log2.gene.tpm.norm) <- dimnames(log2.gene.tpm)
## Mean-centralization: substract gene average across all conditions
average.gene <- rowMeans(log2.gene.tpm.norm)
log2.gene.tpm.norm.all.conditions <- sweep(log2.gene.tpm.norm, 1, average.gene, FUN = "-")
write.table(log2.gene.tpm.norm.all.conditions, file = paste0("../data/data_processed_TIDE/log2mas1TPM_norm_", Cancer,".txt"), sep = "\t")
getwd()
system(paste0("cd"," /Users/Oscar/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/"))
system(paste0("/anaconda3/bin/tidepy ", "../data/data_processed_TIDE/log2mas1TPM_norm_", Cancer,".txt", " -o output_TIDE_norm_",Cancer,".txt -c Other"))
TIDE.table <- read.table(file = paste0("output_TIDE_norm_",Cancer,".txt"), sep = "\t", header = T, row.names = 1)
getwd()
system(paste0("/anaconda3/bin/tidepy ", "../data/data_processed_TIDE/log2mas1TPM_norm_", Cancer,".txt", " -o ../data/data_processed_TIDE/output_TIDE_norm_",Cancer,".txt -c Other"))
TIDE.table.norm <- read.table(file = paste0("output_TIDE_norm_",Cancer,".txt"), sep = "\t", header = T, row.names = 1)
TIDE.table <- read.table(file = paste0("../data/data_processed_TIDE/output_TIDE_",Cancer,".txt"), sep = "\t", header = T, row.names = 1)
TIDE.table.norm <- read.table(file = paste0("../data/data_processed_TIDE/output_TIDE_norm_",Cancer,".txt"), sep = "\t", header = T, row.names = 1)
View(TIDE.table)
View(TIDE.table.norm)
Cancer
TIDE.table <- read.table(file = paste0("../data/data_processed_TIDE/output_TIDE_","GBM",".txt"), sep = "\t", header = T, row.names = 1)
View(TIDE.table)
Cancer = "GBM"
TIDE.score <- data.frame(TIDE = TIDE.table.norm[,"TIDE", drop = FALSE], check.names = F)
View(TIDE.score)
# Derive TIDE score Jiang
source("Signatures_response_ICBs/ObtainTIDE.R")
Cancer
sapply(PanCancer.names, function(Cancer){
cat("\n",Cancer,"\n")
file <- dir(paste0("../data/raw_data_tcga/RNAseq/20160128_version/stddata__2016_01_28/", Cancer,"/20160128/",
"gdac.broadinstitute.org_", Cancer,".Merge_rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes__data.Level_3.2016012800.0.0"),
recursive = TRUE, pattern = "data.txt", full.names = TRUE)
# Extract the raw counts from the text files for each gene
data.transcripts <- read.csv(file, sep="\t",header=T,  row.names=1, stringsAsFactors=F, check.names=FALSE)
colnames(data.transcripts) <- substr(colnames(data.transcripts), 1, 15)
# TPM/scaled_estimate values (transcriptomics data)
get_estimates <- which(data.transcripts[1,] == "scaled_estimate")
estimates.transcripts <- data.frame(data.transcripts[-1,get_estimates])
colnames(estimates.transcripts) <- gsub(".","-", colnames(estimates.transcripts), fixed = TRUE)
genes <- rownames(estimates.transcripts)
estimates.transcripts <- sapply(estimates.transcripts, as.numeric) # numeric
# Obtaining TPM (transcriptomics data)
TPM.transcripts <- estimates.transcripts * 1e6
rownames(TPM.transcripts) <- genes
# Rows with non-valid HGNC symbols were removed.
HGNC_symbol <- sapply(strsplit(rownames(TPM.transcripts),"\\|"),function(X) return(X[1]))
TPM.transcripts <-  TPM.transcripts[-which(HGNC_symbol == "?"),]
HGNC_symbol <-HGNC_symbol[-which(HGNC_symbol == "?")]
HGNC_id <- sapply(strsplit(rownames(TPM.transcripts),"\\|"),function(X) return(X[2]))
# Rows corresponding to the same HGNC symbol were averaged.
if(anyDuplicated(HGNC_symbol) != 0){
idx <- which(duplicated(HGNC_symbol) == TRUE)
dup_genes <- HGNC_symbol[idx]
for (ii in dup_genes){
TPM.transcripts[which(HGNC_symbol %in% ii)[1],] <- colMeans(TPM.transcripts[which(HGNC_symbol %in% ii),])
TPM.transcripts <- TPM.transcripts[-which(HGNC_symbol %in% ii)[2],]
HGNC_symbol <- HGNC_symbol[-which(HGNC_symbol %in% ii)[2]]
}
}
rownames(TPM.transcripts) <- HGNC_symbol
TIDE.score <- ObtainTIDE(TPM.transcripts, Cancer)
# Sample screening:
# ------------------------------------------------------------------------------------------------------- #
## No filter
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_no_filter_",Cancer, ".RData"))
keep.samples.no_filter <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS[[Cancer]], 1, 15)
TIDE.no_filter <- TIDE.score[keep.samples.no_filter, , drop = FALSE]
ImmuneResponse.no_filter$TIDE <- TIDE.no_filter
save(ImmuneResponse.no_filter, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_no_filter_",Cancer, ".RData"))
# ------------------------------------------------------------------------------------------------------- #
## Filter Spat
if(Cancer %in% names(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs)){
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
keep.samples.filter_Spat <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_SpatialTILs[[Cancer]], 1, 15)
TIDE.filter_Spat <- TIDE.score[keep.samples.filter_Spat, , drop = FALSE]
ImmuneResponse.filter_spat$TIDE <- TIDE.filter_Spat
save(ImmuneResponse.filter_spat, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_spat_",Cancer, ".RData"))
}
# ------------------------------------------------------------------------------------------------------- #
## Filter Prot
if(Cancer %in% names(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot)){
load(paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_prot_",Cancer, ".RData"))
keep.samples.filter_prot <- substr(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot[[Cancer]], 1, 15)
TIDE.filter_prot <- TIDE.score[keep.samples.filter_prot, , drop = FALSE]
ImmuneResponse.filter_prot$TIDE <- TIDE.filter_prot
save(ImmuneResponse.filter_prot, file = paste0("../data/PanCancer_draft_v1/",Cancer,"/ImmuneResponse_filter_prot_",Cancer, ".RData"))
}
})
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/CESC/ImmuneResponse_no_filter_CESC.RData")
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/CESC/ImmuneResponse_filter_spat_CESC.RData")
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/CESC/ImmuneResponse_filter_prot_CESC.RData")
View(ImmuneResponse.filter_prot)
View(ImmuneResponse.filter_spat)
View(ImmuneResponse.filter_spat)
View(ImmuneResponse.no_filter)
View(ImmuneResponse.no_filter)
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/HNSC/ImmuneResponse_filter_prot_HNSC.RData")
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/HNSC/ImmuneResponse_filter_spat_HNSC.RData")
load("~/Desktop/PhD_TU:e/Research/mechanistic_biomarkers_immuno-oncology/data/PanCancer_draft_v1/HNSC/ImmuneResponse_no_filter_HNSC.RData")
View(ImmuneResponse.filter_spat)
View(ImmuneResponse.filter_prot)
View(ImmuneResponse.no_filter)
PanCancer.names
View(TCGA.samples.pancancer_with_screen_quantiseg_IS_prot)
View(TCGA.samples.pancancer_with_screen_quantiseg_IS)
Cancer = "GBM"
cat("\n",Cancer,"\n")
file <- dir(paste0("../data/raw_data_tcga/RNAseq/20160128_version/stddata__2016_01_28/", Cancer,"/20160128/",
"gdac.broadinstitute.org_", Cancer,".Merge_rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes__data.Level_3.2016012800.0.0"),
recursive = TRUE, pattern = "data.txt", full.names = TRUE)
# Extract the raw counts from the text files for each gene
data.transcripts <- read.csv(file, sep="\t",header=T,  row.names=1, stringsAsFactors=F, check.names=FALSE)
colnames(data.transcripts) <- substr(colnames(data.transcripts), 1, 15)
# TPM/scaled_estimate values (transcriptomics data)
get_estimates <- which(data.transcripts[1,] == "scaled_estimate")
estimates.transcripts <- data.frame(data.transcripts[-1,get_estimates])
colnames(estimates.transcripts) <- gsub(".","-", colnames(estimates.transcripts), fixed = TRUE)
genes <- rownames(estimates.transcripts)
estimates.transcripts <- sapply(estimates.transcripts, as.numeric) # numeric
# Obtaining TPM (transcriptomics data)
TPM.transcripts <- estimates.transcripts * 1e6
rownames(TPM.transcripts) <- genes
# Rows with non-valid HGNC symbols were removed.
HGNC_symbol <- sapply(strsplit(rownames(TPM.transcripts),"\\|"),function(X) return(X[1]))
TPM.transcripts <-  TPM.transcripts[-which(HGNC_symbol == "?"),]
HGNC_symbol <-HGNC_symbol[-which(HGNC_symbol == "?")]
HGNC_id <- sapply(strsplit(rownames(TPM.transcripts),"\\|"),function(X) return(X[2]))
# Rows corresponding to the same HGNC symbol were averaged.
if(anyDuplicated(HGNC_symbol) != 0){
idx <- which(duplicated(HGNC_symbol) == TRUE)
dup_genes <- HGNC_symbol[idx]
for (ii in dup_genes){
TPM.transcripts[which(HGNC_symbol %in% ii)[1],] <- colMeans(TPM.transcripts[which(HGNC_symbol %in% ii),])
TPM.transcripts <- TPM.transcripts[-which(HGNC_symbol %in% ii)[2],]
HGNC_symbol <- HGNC_symbol[-which(HGNC_symbol %in% ii)[2]]
}
}
rownames(TPM.transcripts) <- HGNC_symbol
gene.tpm <- TPM.transcripts
# ***************
# Gene expression data just for roh immune signature score
match_genes <- na.omit(match(CYT_read, rownames(gene.tpm)))
match_genes
which(rownames(gene.tpm) %in% "GZMA")
gene.tpm <- gene.tpm[-which(rownames(gene.tpm) %in% "GZMA"),]
# ***************
# Gene expression data just for roh immune signature score
match_genes <- na.omit(match(CYT_read, rownames(gene.tpm)))
match_genes
anyNA(match_genes)
# ***************
# Gene expression data just for roh immune signature score
match_genes <- match(CYT_read, rownames(gene.tpm))
match_genes
if (anyNA(match_genes)){
warning("Be careful, some genes are missing")
cat("MISSING GENES", "\n")
cat(!which(CYT_read %in% rownames(gene.tpm)))
}
warning(paste0("Signature genes missing: \n", cat(!which(CYT_read %in% rownames(gene.tpm))))
cat(!which(CYT_read %in% rownames(gene.tpm)))
}
CYT.score <- vector("numeric", length = ncol(gene.tpm)) ; names(CYT.score) <- colnames(gene.tpm)
# Subset gene expression data
sub_gene.tpm <- gene.tpm[match_genes,]
# Calculated as geometric mean (so-called log-average) [TPM, 0.01 offset]
geom_mean <- as.data.frame(apply(sub_gene.tpm + 0.01, 2, function(X) exp(mean(log(X)))))
CYT.score <- data.frame(CYT = geom_mean, check.names = FALSE)
cat("CYT score computed","\n")
return(CYT.score)
}
warning(paste0("Signature genes missing: \n", cat(!which(CYT_read %in% rownames(gene.tpm)))))
cat(!which(CYT_read %in% rownames(gene.tpm))
warning(paste0("Signature genes missing: \n", !which(CYT_read %in% rownames(gene.tpm))))
warning(paste0("Signature genes missing: \n", CYT_read[CYT_read %in% rownames(gene.tpm)]))
match_genes
if (anyNA(match_genes)){
warning(paste0("Signature genes missing: \n", CYT_read[CYT_read %in% rownames(gene.tpm)]))
match_genes <- na.omit(match_genes)
}
{
warning(paste0("Signature genes missing: \n", CYT_read[CYT_read %in% rownames(gene.tpm)]))
match_genes <- na.omit(match_genes)
}
match_genes
if (anyNA(match_genes)){
warning(paste0("Signature genes missing: \n", CYT_read[CYT_read %in% rownames(gene.tpm)]))
match_genes <- na.omit(match_genes)
}
View(gene_expr)
# ****************
# working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# ****************
# packages
library(devtools)
library(matrixStats)
# ****************
# scripts
source("./R/cross_validation_multi-task.R")
# ****************
# Select cancer type
load("./analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS.RData")
# load("./analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS_prot.RData")
# load("./analysis/pre-processing/TCGA_samples_available_screening_with_quanTIseq_IS_Spat.RData")
PanCancer.names <- names(TCGA.samples.pancancer_with_screen_quantiseg_IS)
# ****************
# views
views <- c(Pathways = 'gaussian', #1
Protall = 'gaussian', #2
ImmuneCells = 'gaussian', #3
TFs = 'gaussian', #4
Transcript = 'gaussian', #5
sTIL = 'gaussian', #6
LRpairs = 'gaussian', #7
CYTOKINEpairs = 'gaussian')  #8)
# ****************
view_combinations <- list(views[1], views[3], views[c(1,3)], views[4], views[5], views[7], views[8])
# ****************
# data
load("./data/parameters_4_all.RData")
View(parameters)
# ****************
#input_algorithm = names(parameters)
input_algorithm <- c("Multi_Task_EN")
filter_tasks <- c("IPS","IMPRES", "Proliferation", "TIDE", "MSI","chemokine")
Cancer = "SKCM"
load(paste0("./data/PanCancer_draft_v1/",Cancer,"/new/DataViews_filter_spat_", Cancer,".RData"))
